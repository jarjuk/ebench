* ~ebech~ implementation template
:PROPERTIES:
:TOC:      :include all
:END:

:CONTENTS:
- [[#ebech-implementation-template][ebech implementation template]]
  - [[#ebench-template-overview][ebench Template Overview]]
  - [[#elements-in-example-application][Elements in example application]]
    - [[#import-services-from-ebench-t_imports_ebench][Import services from ebench: <<t_imports_ebench>>]]
    - [[#define-usage-and-help-texts-t_usage][Define usage and help texts: <<t_USAGE>>]]
    - [[#implement-instrument-controller-classes-t_instrumentapi-and-t_instrumentfacade][Implement Instrument controller classes: <<t_InstrumentApi>> and <<t_InstrumentFacade>>]]
    - [[#define-menu-commands-and-parameters-t_menuelements-and-t_menurows][Define menu commands and parameters: <<t_MenuElements>> and <<t_MenuRows>>]]
    - [[#construct-instrument-controller--t_constructorparam-and-t_constructorcall][Construct instrument controller:  <<t_constructorParam>> and <<t_constructorCall>>]]
    - [[#define-runtime-configuration-and-main--function-t_confdef-and-t_confparam][Define runtime configuration and main -function: <<t_confDef>> and <<t_confParam>>]]
  - [[#templates-to-produce-instrument-controller-application][Templates to produce instrument controller application]]
    - [[#instrument-controller-implementation-apppy][Instrument controller implementation: app.py]]
    - [[#instrument-controller-run-time-configuration-and-standalone-main-app-mainpy][Instrument controller run time configuration and standalone main: app-main.py]]
  - [[#rigol-example-instrument-controller-python-code][Rigol example instrument controller Python code]]
    - [[#instrument-controller-implementation-and-run-function-examplestemplateexamplepy][Instrument controller implementation and run function: examples/template/example.py]]
    - [[#instrument-controller-run-time-configuration-and-standalone-main-examplestemplateexample_mainpy][Instrument controller run time configuration and standalone main: examples/template/example_main.py]]
  - [[#testing-rigol-example-instrument-controller][Testing Rigol example instrument controller]]
    - [[#usage-][Usage ?]]
    - [[#command-help----][Command help  - ??]]
      - [[#help-on-commandreset][Help on command=reset]]
      - [[#help-on-commandsetup][Help on command=setup]]
    - [[#command-reset][Command reset]]
    - [[#command-setup-and-screen][Command setup and screen]]
    - [[#embed-into-ebmenu][Embed into ebMenu]]
:END:

** ebench Template Overview

This example presents a template for implementing instrument
controllers on ~ebench~ -toolset and demonstrates this template with
instrument controller for Rigol oscilloscope.

Elements required to add an instrument controller on ~ebench~ toolset:

1) import services from ~ebench~ -module into Python implementation.

2) define usage and help texts.

3) implement instrument controller classes. For example, Rigol
   controller uses two classes ~InstrumentApi~ and ~InstrumentFacade~,
   where ~InstrumentApi~ access [[https://beyondmeasure.rigoltech.com/acton/attachment/1579/f-0386/1/-/-/-/-/DS1000Z_Programming%2520Guide_EN.pdf][Api]] on Rigol oscilloscope and
   ~InstrumentFacade~ defines service facade for user.

4) define menu commands and command parameters for application menu.

5) construct instrument controller

6) define run time configuration parameters and implement ~main~ to
   make instrument controller as a standalone application

These application elements are used by two templates to produce two
Python modules:

1) module for instrument controller classes and ~run~ function:
   ~app.py~

2) module for run time configuration and standalone ~main~:
   ~app-main.py~


** Elements in ~example~ application

This chapter defines template place holders = names inside double
angle brackets: ~<<>>~

*** Import services from ~ebench~: ~<<t_imports_ebench>>~

Import services provided by ~ebench~: 
- ~PyInstrument~: class interfacing electronic instrument over
  "Virtual Instrument Software Architecture” (VISA) interface using
  Python [[https://pypi.org/project/PyVISA-py/][PyVisa-py]] -package,
- ~MenuCtrl~: ~ebench~ menu implementation
- ~ebench~ infrastrcture service functions:
  - ~usage~: helper output listing menu commands and presenting
    appliaction overview
  - ~usageCommand~: help on menu command in application
  - ~menuStartRecording~: start recording of interactive use menu commands
  - ~menuStopRecording~: save recording of interactive menu commands
  - ~menuScreenShot~: take a screenshot from the instrument
  - ~version~: output ~ebench~ toolset version number

#+name: t_imports_ebench
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*

from ebench import PyInstrument
from ebench import MenuCtrl

from ebench import usage, usageCommand, menuStartRecording, menuStopRecording, menuScreenShot, version
#+END_SRC


*** Define usage and help texts: ~<<t_USAGE>>~

Define name, short description and a description of application
services.

#+name: t_USAGE
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
  CMD="example"

  SYNOPSIS="Instrument Controller Example for Rigol MSO1104Z Oscilloscope"

  USAGE_TEXT=f""" 
  A small example of an ebench instrument controller 

  Tested on Rigol MSO1104Z. 
  
  """

#+END_SRC


*** Implement Instrument controller classes: ~<<t_InstrumentApi>>~ and ~<<t_InstrumentFacade>>~

Instrument controller is implemented using two classes ~InstrumentApi~
and ~InstrumentFacade~. Class ~InstrumentApi~ accesses Rigol
oscilloscope over [[https://www.rigolna.com/products/digital-oscilloscopes/1000z/#ds1000Z/ds1104zplus][instrument API]], and class ~InstrumentFacade~
provides facade for user to access oscilloscope functions.

*<<t_InstrumentApi>>*

#+name: t_InstrumentApi
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*

  class InstrumentApiException(Exception):
        pass

  class MyConfigurationError(InstrumentApiException):
        pass
  class MyRuntimeError(InstrumentApiException):
        pass

  class InstrumentApi(PyInstrument):
      """Abstract base class, which inherits from 'PyInstrument' i.e.
      can be controlled using pyvisa.
      """

      # Constructor && setup
      def __init__(self, ip=None):
          logging.info( "InstrumentApi: ip={}".format(ip))
          if ip is None:
              raise MyConfigurationError( "Missing configuration 'ip'")
          self.ip = ip
          # Init pyvisa on address
          addr = "TCPIP0::{}::INSTR".format(ip)
          super().__init__(addr=addr)

      # Destructor && close stuff
      def close(self):
          logging.info( "InstrumentApi: closing all my resources, pass to super")
          super().close()

      # Template implementation
      def screenShotImplementation( self, filePath):
          """Screenshot implementation using lxi command line

          :filePath: path where to save screen shot

          :return: filePath in success, None in error

          """
          cmd = "lxi  screenshot  {} --address {} >/dev/null".format( filePath, self.ip )
          logging.info( "screenShotImplementation: cmd:{}".format(cmd))
          status = os.system(cmd)
          logging.debug( "screenShotImplementation: status={} after {}".format(status,cmd))
          if status != 0:
              msg = "status={} for cmd={}".format(status, cmd)
              logging.error(msg)
              return None
          return filePath



      # Elementary services 
      def baseDelay(self, delay=1):
          """Allow instrument to settle before next action.

          :delay: number of base units to wait before next action

          """
          delayUnit=0.2
          sleep(delay*delayUnit)

      # API services
      # Ref:  https://www.rigolna.com/products/digital-oscilloscopes/1000z/#ds1000Z/ds1104zplus

      def baseReset(self):
          self.pyvisaReset()

      def baseChannelOnOff( self, channel, onOff:None):
          cmd = ":CHAN{}:DISP {}".format(channel,"ON" if onOff else "OFF" )
          return  self.write(cmd)


      def baseChannelScale( self, channel, scale ):
          """Set or query the vertical scale of the specified channel. The
          default unit is V.
          """
          cmd = ":CHAN{}:SCAL {}".format( channel, scale)
          self.write( cmd )

      def baseChannelOffset( self, channel, offset ):
          """Set or query the vertical offset of the specified channel. The
          default unit is V.

          Related to the current vertical scale and probe ratio When the
          probe ratio is 1X, vertical scale≥500mV/div: -100V to +100V
          vertical scale<500mV/div: -2V to +2V When the probe ratio is
          10X, vertical scale≥5V/div: -1000V to +1000V vertical
          scale<5V/div: -20V to +20V
          """
          cmd = ":CHAN{}:OFFSET {}".format( channel, offset)
          self.write( cmd )


      def baseChannelDisplayUnit( self, channel, siUnit ):
          """Set or query the amplitude display unit of the specified channel"""
          def si2ScopeUnit( siUnit):
              unitMapper = {
                  "A": "AMP",
                  "V": "VOLT",
                  "W": "WATT",
              }
              baseUnit = "UNKN"
              try:
                  baseUnit = unitMapper[siUnit]
              except KeyError:
                  pass
              return baseUnit
          cmd = ":CHAN{}:UNIT {}".format( channel,si2ScopeUnit(siUnit))
          self.write(cmd)

      def baseChannelMeasurementStat( self, channel, item ):
          """
          :channel: channel number 1,2,3,4
          """
          cmd = ":MEAS:STAT:ITEM {},CHAN{}".format( item, channel)
          self.write( cmd )
#+END_SRC

*<<t_InstrumentFacade>>* 
#+name: t_InstrumentFacade
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
  class InstrumentFacade(InstrumentApi):
      def __init__( self, ip=None):
          super().__init__( ip=ip )

      def reset(self):
          """Reset scope to default state
           reset

          """
          self.baseReset()

      def setup(self, channel, scale=None, offset=None, stats=None ):
          """Setup osciloscope 'channel', measurement scale (scale), screen
          offset (offset), and measurement collection on the screen
          bottm row (stats)

          :scale: Set vertical scale and unit of 'channel', if given (=no
          change if not given). Example: scale=1V.

          :offset: Set offset and unit of channel. No change if not
          given

          :stats: comma separed list of measurement items to start
          collecting in scope bottom row. Empty list does not change
          measurement statistic collection

          Valid measument identifiers: MAX, VMIN, VPP, VTOP, VBASe,
          VAMP, VAVG, VRMS, OVERshoot, MARea, MPARea, PREShoot, PERiod,
          FREQuency, RTIMe, FTIMe, PWIDth, NWIDth, PDUTy, NDUTy, TVMAX,
          TVMIN, PSLEWrate, NSLEWrate, VUPper, VMID, VLOWer, VARIance,
          PVRMS, PPULses, NPULses, PEDGes, and NEDGes

          """
          logging.info( "Setup channel: {}, stats='{}'".format(channel, stats ))
          self.baseChannelOnOff( channel=channel, onOff = True )
          if scale is not None and not not scale:
              (val,siUnit) = self.instrumentValUnit(scale)
              self.baseChannelScale(channel,val)
              self.baseChannelDisplayUnit(channel,siUnit)
          if offset is not None and not not offset:
              (val,siUnit) = self.instrumentValUnit(offset)
              self.baseChannelOffset(channel,val)
              self.baseChannelDisplayUnit(channel,siUnit)
          if stats is not None and not not stats:
              items = stats.split(",")
              for item in items:
                  self.baseChannelMeasurementStat(item=item.upper(), channel=channel)
          self.baseDelay()
#+END_SRC


*** Define menu commands and parameters: ~<<t_MenuElements>>~ and ~<<t_MenuRows>>~

Menu commands and parameters are configured using ~<<t_MenuElements>>~
element.

*<<t_MenuElements>>*

#+name: t_MenuElements
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*

# Menu commands 
CMD_RESET= "reset"
CMD_SETUP= "setup"


# Parameters to menu command CMD_SETUP
setupPar = {
    "channel"  : "Channel 1-4 to act upon",
    "scale"    : "Channel scale, value + unit[V,A,W]",
    "offset"   : "Channel offset, value + unit[V,A,W]",
    "stats"    : "Comma -separated list of stat measuremnts",
}

# Initial values for menu command parameters
defaults = {
   CMD_SETUP: {
        "offset": "0V"
   }
}
#+END_SRC

*<<t_MenuRows>>*

~<<t_MenuRows>>~ is a list key-values pairs added into a dictionary
defining application menu.
#+name: t_MenuRows
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
          CMD_RESET                : ( "Send reset to Scope", None, instrument.reset),
          CMD_SETUP                : ( "Setup channel", setupPar, instrument.setup ),
#+END_SRC


*** Construct instrument controller:  ~<<t_constructorParam>>~ and ~<<t_constructorCall>>~

Contructing instrument uses two template elements:
<<t_constructorParam>> defines parameters configuring instrument
controller, and <<t_constructorCall>> instantiates instrument
controller object using configuration parameters.


*<<t_constructorParam>>*

<<t_constructorParam>> parameters are included in ~run~ -function
parameter list.

#+name: t_constructorParam
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
ip:str=None
#+END_SRC


*<<t_constructorCall>>*

Instantiate object =instrument= for =InstrumentFacade= passing
parameters defined in <<t_constructorParam>> to the constructor.

#+name: t_constructorCall
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
instrument = InstrumentFacade(ip=ip)
#+END_SRC


*** Define runtime configuration and ~main~ -function: ~<<t_confDef>>~ and ~<<t_confParam>>~

Instrument runtime configuration and ~main~ -function are implemented
in a serate class to avoid conflicts in runtime configuration
parameter names, when different instrument controllers are merged
together within one program (~ebMenu~).

Runtime configuration and ~main~ -function uses three template elements

*<<t_import_app>>*

Import ~run~ function from instrument controller  implementation module.
#+name: t_import_app
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
from example import run
#+END_SRC

*<<t_confDef>>*

Define command line configuration parameters for instrument controller.

#+name: t_confDef
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
flags.DEFINE_string('ip', None, "IP -address of device")
#+END_SRC

*<<t_confParam>>*

Add command line configuration arguments to ~run~ -function argument
list. This template elements reflect the caller side of template
element ~<<t_constructorParam>>~ presented above.

#+name: t_confParam
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
ip=FLAGS.ip
#+END_SRC

    
** Templates to produce instrument controller application

Application elements presentes in previous chapter are used in two
templates producing Python code:

1) module for instrument controller implementation and ~run~ function:
   ~app.py~

2) instrument controller run time configuration and standalone ~main~:
   ~app-main.py~

*** Instrument controller implementation: ~app.py~ 

This template creates Python module implemeting instrument controller
classes and ~run~ function.

~run~ -function instantiates ~intrument~ -variable, constructs
~menuController~, and sets up application ~mainMenu~. 

Parameter ~runMenu~ guards call to ~menuController.mainMenu()~, which
starts application [[https://codewith.mu/en/tutorials/1.1/repl][REPL]] (red-eval-print) -loop. Parameter ~runMenu~ is
set ~True~ for interactive use, for command line use and for API use
it is ~False~.

#+BEGIN_SRC python :eval no :results output :noweb no :session *Python* :noweb yes :tangle examples/template/example.py :noweb yes :exports code
  # Tangled from TEMPLATE.org - changes will be overridden

  <<t_imports_ebench>>

  import os
  from time import sleep
  from absl import logging

  <<t_imports_os>>
  # ------------------------------------------------------------------
  # Usage 
  <<t_USAGE>>

  # ------------------------------------------------------------------
  # Acces instrument API
  <<t_InstrumentApi>>

  # ------------------------------------------------------------------
  # Facade presented to user
  <<t_InstrumentFacade>>


  # ------------------------------------------------------------------
  # Menu
  <<t_MenuElements>>

  # ------------------------------------------------------------------
  # Bind instrument controller classes to ebench toolset
  def run( _argv, <<t_constructorParam>>
       , runMenu:bool = True
       , outputTemplate=None, captureDir=None, recordingDir=None ):
      """Examaple template 

      :runMenu: default True, standalone application call REPL-loop
      'menuController.mainMenu()', subMenu constructs 'menuController'
      without executing the loop

      :outputTemplate: if None(default): execute cmds/args, else (not
      None): map menu actions to strings using 'outputTemplate'

      :recordingDir: directory where interactive session recordings are
      saved to (defaults to 'FLAGS.recordingDir')

      :captureDir: directory where screenshots are made, defaults to
      'FLAGS.captureDir'

      :return: MenuCtrl (wrapping instrument)

      """

      # Instantiate 'instrument' controlled by application 
      <<t_constructorCall>> 

      # Wrap instrument within 'MenuCtrl'
      menuController = MenuCtrl( args=_argv,instrument=instrument
                               , prompt="[q=quit,?=commands,??=help on command]"
                               , outputTemplate=outputTemplate )

      mainMenu = {
          CMD                      : MenuCtrl.MENU_SEPATOR_TUPLE,
          # Application menu 
          <<t_MenuRows>>

          "Util"                   : MenuCtrl.MENU_SEPATOR_TUPLE,
          MenuCtrl.MENU_REC_START  : ( "Start recording", None, menuStartRecording(menuController) ),
          MenuCtrl.MENU_REC_SAVE   : ( "Stop recording", MenuCtrl.MENU_REC_SAVE_PARAM, menuStopRecording(menuController, recordingDir=recordingDir) ),
          MenuCtrl.MENU_SCREEN     : ( "Take screenshot", MenuCtrl.MENU_SCREENSHOT_PARAM,
                                       menuScreenShot(instrument=instrument,captureDir=captureDir,prefix="Capture-" )),
          MenuCtrl.MENU_HELP       : ( "List commands", None,
                                      lambda **argV: usage(cmd=CMD, mainMenu=mainMenu, synopsis=SYNOPSIS, usageText=USAGE_TEXT)),
          MenuCtrl.MENU_HELP_CMD   : ( "List command parameters", MenuCtrl.MENU_HELP_CMD_PARAM,
                                   lambda **argV: usageCommand(mainMenu=mainMenu, **argV )),

          "Quit"                   : MenuCtrl.MENU_SEPATOR_TUPLE,
          MenuCtrl.MENU_QUIT       : MenuCtrl.MENU_QUIT_TUPLE,

          # Hidden commands
          MenuCtrl.MENU_VERSION    : ( "Output version number", None, version ),
      }


      menuController.setMenu( menu = mainMenu, defaults = defaults)

      # Interactive use starts REPL-loop
      if runMenu: menuController.mainMenu()

      # menuController.close() call after returning from run()
      return menuController
#+END_SRC


*** Instrument controller run time configuration and standalone ~main~: ~app-main.py~

#+BEGIN_SRC python :eval no :results output :noweb no :session *Python* :noweb yes :tangle examples/template/example_main.py :noweb yes :exports code :noweb yes :shebang "#!/usr/bin/env python3"
# Tangled from TEMPLATE.org - changes will be overridden

# main for instrument controller define in module
<<t_import_app>>

from absl import app, flags, logging
from absl.flags import FLAGS

# Run time configurations of instrument controller
<<t_confDef>>

def _main( _argv ):
    logging.set_verbosity(FLAGS.debug)
    menuController = run(
           _argv
          , <<t_confParam>>   # pass run time configuration parameters to controller
          , captureDir=FLAGS.captureDir
          , recordingDir=FLAGS.recordingDir
          , outputTemplate=FLAGS.outputTemplate 
          )
    menuController.close()


def main():
    try:
        app.run(_main)
    except SystemExit:
        pass
    
    
if __name__ == '__main__':
    main()

#+END_SRC


** Rigol example instrument controller Python code

This chapter presents the two Python modules created using templates
presented in the previous chapter:


*** Instrument controller implementation and ~run~ function: ~examples/template/example.py~

#+BEGIN_SRC bash :eval no-export :results output :exports results
cat examples/template/example.py
#+END_SRC

#+RESULTS:
#+begin_example
# Tangled from TEMPLATE.org - changes will be overridden


from ebench import PyInstrument
from ebench import MenuCtrl

from ebench import usage, usageCommand, menuStartRecording, menuStopRecording, menuScreenShot, version

import os
from time import sleep
from absl import logging


# ------------------------------------------------------------------
# Usage 
CMD="example"

SYNOPSIS="Example to setup oscilloscope"

USAGE_TEXT=f""" 
A minimal running example ebench tool for setting up oscilloscope
configuration.

Tested on Rigol MSO1104Z. 


"""


# ------------------------------------------------------------------
# Acces instrument API

class InstrumentApiException(Exception):
      pass

class MyConfigurationError(InstrumentApiException):
      pass
class MyRuntimeError(InstrumentApiException):
      pass

class InstrumentApi(PyInstrument):
    """Abstract base class, which inherits from 'PyInstrument' i.e.
    can be controlled using pyvisa.
    """

    # Constructor && setup
    def __init__(self, ip=None):
        logging.info( "InstrumentApi: ip={}".format(ip))
        if ip is None:
            raise MyConfigurationError( "Missing configuration 'ip'")
        self.ip = ip
        # Init pyvisa on address
        addr = "TCPIP0::{}::INSTR".format(ip)
        super().__init__(addr=addr)

    # Destructor && close stuff
    def close(self):
        logging.info( "InstrumentApi: closing all my resources, pass to super")
        super().close()

    # Template implementation
    def screenShotImplementation( self, filePath):
        """Screenshot implementation using lxi command line

        :filePath: path where to save screen shot

        :return: filePath in success, None in error

        """
        cmd = "lxi  screenshot  {} --address {} >/dev/null".format( filePath, self.ip )
        logging.info( "screenShotImplementation: cmd:{}".format(cmd))
        status = os.system(cmd)
        logging.debug( "screenShotImplementation: status={} after {}".format(status,cmd))
        if status != 0:
            msg = "status={} for cmd={}".format(status, cmd)
            logging.error(msg)
            return None
        return filePath



    # Elementary services 
    def baseDelay(self, delay=1):
        """Allow instrument to settle before next action.

        :delay: number of base units to wait before next action

        """
        delayUnit=0.2
        sleep(delay*delayUnit)

    # API services
    def baseReset(self):
        self.pyvisaReset()

    def baseChannelOnOff( self, channel, onOff:None):
        cmd = ":CHAN{}:DISP {}".format(channel,"ON" if onOff else "OFF" )
        return  self.write(cmd)


    def baseChannelScale( self, channel, scale ):
        """Set or query the vertical scale of the specified channel. The
        default unit is V.
        """
        cmd = ":CHAN{}:SCAL {}".format( channel, scale)
        self.write( cmd )

    def baseChannelOffset( self, channel, offset ):
        """Set or query the vertical offset of the specified channel. The
        default unit is V.

        Related to the current vertical scale and probe ratio When the
        probe ratio is 1X, vertical scale≥500mV/div: -100V to +100V
        vertical scale<500mV/div: -2V to +2V When the probe ratio is
        10X, vertical scale≥5V/div: -1000V to +1000V vertical
        scale<5V/div: -20V to +20V
        """
        cmd = ":CHAN{}:OFFSET {}".format( channel, offset)
        self.write( cmd )


    def baseChannelDisplayUnit( self, channel, siUnit ):
        """Set or query the amplitude display unit of the specified channel"""
        def si2ScopeUnit( siUnit):
            unitMapper = {
                "A": "AMP",
                "V": "VOLT",
                "W": "WATT",
            }
            baseUnit = "UNKN"
            try:
                baseUnit = unitMapper[siUnit]
            except KeyError:
                pass
            return baseUnit
        cmd = ":CHAN{}:UNIT {}".format( channel,si2ScopeUnit(siUnit))
        self.write(cmd)

    def baseChannelMeasurementStat( self, channel, item ):
        """
        :channel: channel number 1,2,3,4
        """
        cmd = ":MEAS:STAT:ITEM {},CHAN{}".format( item, channel)
        self.write( cmd )

# ------------------------------------------------------------------
# Facade presented to user
class InstrumentFacade(InstrumentApi):
    def __init__( self, ip=None):
        super().__init__( ip=ip )

    def reset(self):
        """Reset scope to default state
         reset

        """
        self.baseReset()

    def setup(self, channel, scale=None, offset=None, stats=None ):
        """Setup osciloscope 'channel', measurement scale (scale), screen
        offset (offset), and measurement collection on the screen
        bottm row (stats)

        :scale: Set vertical scale and unit of 'channel', if given (=no
        change if not given). Example: scale=1V.

        :offset: Set offset and unit of channel. No change if not
        given

        :stats: comma separed list of measurement items to start
        collecting in scope bottom row. Empty list does not change
        measurement statistic collection

        Valid measument identifiers: MAX, VMIN, VPP, VTOP, VBASe,
        VAMP, VAVG, VRMS, OVERshoot, MARea, MPARea, PREShoot, PERiod,
        FREQuency, RTIMe, FTIMe, PWIDth, NWIDth, PDUTy, NDUTy, TVMAX,
        TVMIN, PSLEWrate, NSLEWrate, VUPper, VMID, VLOWer, VARIance,
        PVRMS, PPULses, NPULses, PEDGes, and NEDGes

        """
        logging.info( "Setup channel: {}, stats='{}'".format(channel, stats ))
        self.baseChannelOnOff( channel=channel, onOff = True )
        if scale is not None and not not scale:
            (val,siUnit) = self.instrumentValUnit(scale)
            self.baseChannelScale(channel,val)
            self.baseChannelDisplayUnit(channel,siUnit)
        if offset is not None and not not offset:
            (val,siUnit) = self.instrumentValUnit(offset)
            self.baseChannelOffset(channel,val)
            self.baseChannelDisplayUnit(channel,siUnit)
        if stats is not None and not not stats:
            items = stats.split(",")
            for item in items:
                self.baseChannelMeasurementStat(item=item.upper(), channel=channel)
        self.baseDelay()


# ------------------------------------------------------------------
# Menu
CMD_RESET= "reset"
CMD_SETUP= "setup"

channelPar = {
    "channel"  : "Channel 1-4 to act upon"
}

setupPar = channelPar | {
    "scale"    : "Channel scale, value + unit[V,A,W]",
    "offset"   : "Channel offset, value + unit[V,A,W]",
    "stats"    : "Comma -separated list of stat measuremnts",
}

defaults = {
   CMD_SETUP: {
        "offset": "0V"
   }
}

# ------------------------------------------------------------------
# Bind instrument controller classes to ebench toolset
def run( _argv, ip:str=None
     , runMenu:bool = True
     , outputTemplate=None, captureDir=None, recordingDir=None ):
    """Examaple template 

    :runMenu: default True, standalone application call REPL-loop
    'menuController.mainMenu()', subMenu constructs 'menuController'
    without executing the loop

    :outputTemplate: if None(default): execute cmds/args, else (not
    None): map menu actions to strings using 'outputTemplate'

    :recordingDir: directory where interactive session recordings are
    saved to (defaults to 'FLAGS.recordingDir')

    :captureDir: directory where screenshots are made, defaults to
    'FLAGS.captureDir'

    :return: MenuCtrl (wrapping instrument)

    """

    # 'instrument' controlled by application 
    instrument = InstrumentFacade(ip=ip) 

    # Wrap instrument with 'MenuCtrl'
    menuController = MenuCtrl( args=_argv,instrument=instrument
                             , prompt="[q=quit,?=commands,??=help on command]"
                             , outputTemplate=outputTemplate )

    mainMenu = {
        CMD                      : MenuCtrl.MENU_SEPATOR_TUPLE,
        # Application menu 
        CMD_RESET                : ( "Send reset to Scope", None, instrument.reset),
        CMD_SETUP                : ( "Setup channel", setupPar, instrument.setup ),

        "Util"                   : MenuCtrl.MENU_SEPATOR_TUPLE,
        MenuCtrl.MENU_REC_START  : ( "Start recording", None, menuStartRecording(menuController) ),
        MenuCtrl.MENU_REC_SAVE   : ( "Stop recording", MenuCtrl.MENU_REC_SAVE_PARAM, menuStopRecording(menuController, recordingDir=recordingDir) ),
        MenuCtrl.MENU_SCREEN     : ( "Take screenshot", MenuCtrl.MENU_SCREENSHOT_PARAM,
                                     menuScreenShot(instrument=instrument,captureDir=captureDir,prefix="Capture-" )),
        MenuCtrl.MENU_HELP       : ( "List commands", None,
                                    lambda **argV: usage(cmd=CMD, mainMenu=mainMenu, synopsis=SYNOPSIS, usageText=USAGE_TEXT)),
        MenuCtrl.MENU_HELP_CMD   : ( "List command parameters", MenuCtrl.MENU_HELP_CMD_PARAM,
                                 lambda **argV: usageCommand(mainMenu=mainMenu, **argV )),

        "Quit"                   : MenuCtrl.MENU_SEPATOR_TUPLE,
        MenuCtrl.MENU_QUIT       : MenuCtrl.MENU_QUIT_TUPLE,

        # Hidden commands
        MenuCtrl.MENU_VERSION    : ( "Output version number", None, version ),
    }

    menuController.setMenu( menu = mainMenu, defaults = defaults)

    # Interactive use starts REPL-loop
    if runMenu: menuController.mainMenu()

    # menuController.close() call after returning from run()
    return menuController
#+end_example


*** Instrument controller run time configuration and standalone ~main~: ~examples/template/example_main.py~

#+BEGIN_SRC bash :eval no-export :results output :exports results
cat examples/template/example_main.py
#+END_SRC

#+RESULTS:
#+begin_example
#!/usr/bin/env python3
# Tangled from TEMPLATE.org - changes will be overridden

# main for instrument controller define in module
from example import run

from absl import app, flags, logging
from absl.flags import FLAGS

# Run time configurations of instrument controller
flags.DEFINE_string('ip', None, "IP -address of device")

def _main( _argv ):
    logging.set_verbosity(FLAGS.debug)
    menuController = run(
           _argv
          , ip=FLAGS.ip   # pass run time configuration parameters to controller
          , captureDir=FLAGS.captureDir
          , recordingDir=FLAGS.recordingDir
          , outputTemplate=FLAGS.outputTemplate 
          )
    menuController.close()


def main():
    try:
        app.run(_main)
    except SystemExit:
        pass
    
    
if __name__ == '__main__':
    main()
#+end_example


** Testing Rigol example instrument controller

This chapter uses <<exampleCmd>> to refer the following code snippet:

#+name: exampleCmd
#+BEGIN_SRC bash :eval no
examples/template/example_main.py --ip=skooppi
#+END_SRC


*** Usage ~?~

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<exampleCmd>> ?
#+END_SRC

#+RESULTS:
#+begin_example
example: Instrument Controller Example for Rigol MSO1104Z Oscilloscope

Usage: example [options] [commands and parameters] 

Commands:

----------  example   ----------
          reset  : Send reset to Scope
          setup  : Setup channel
----------    Util    ----------
              !  : Start recording
              .  : Stop recording
         screen  : Take screenshot
              ?  : List commands
             ??  : List command parameters
----------    Quit    ----------
              q  : Exit
 
A small example of an ebench instrument controller 

Tested on Rigol MSO1104Z. 


#+end_example


*** Command help  - ~??~
    
**** Help on ~command=reset~

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<exampleCmd>> ?? command=reset
#+END_SRC

#+RESULTS:
#+begin_example
reset - Send reset to Scope

Reset scope to default state
reset

,*No parameters*

Notice:
- parameters MUST be given in the order listed above
- parameters are optional and they MAY be left out
#+end_example



**** Help on ~command=setup~

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<exampleCmd>> ?? command=setup
#+END_SRC

#+RESULTS:
#+begin_example
setup - Setup channel

Setup osciloscope 'channel', measurement scale (scale), screen
offset (offset), and measurement collection on the screen
bottm row (stats)

:scale: Set vertical scale and unit of 'channel', if given (=no
change if not given). Example: scale=1V.

:offset: Set offset and unit of channel. No change if not
given

:stats: comma separed list of measurement items to start
collecting in scope bottom row. Empty list does not change
measurement statistic collection

Valid measument identifiers: MAX, VMIN, VPP, VTOP, VBASe,
VAMP, VAVG, VRMS, OVERshoot, MARea, MPARea, PREShoot, PERiod,
FREQuency, RTIMe, FTIMe, PWIDth, NWIDth, PDUTy, NDUTy, TVMAX,
TVMIN, PSLEWrate, NSLEWrate, VUPper, VMID, VLOWer, VARIance,
PVRMS, PPULses, NPULses, PEDGes, and NEDGes

   channel  : Channel 1-4 to act upon
     scale  : Channel scale, value + unit[V,A,W]
    offset  : Channel offset, value + unit[V,A,W]
     stats  : Comma -separated list of stat measuremnts

Notice:
- parameters MUST be given in the order listed above
- parameters are optional and they MAY be left out
#+end_example


*** Command ~reset~

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<exampleCmd>> reset
#+END_SRC

#+RESULTS:


*** Command ~setup~ and ~screen~ 

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<exampleCmd>> setup channel=1 scale=5V offset=10V setup channel=2 scale=5V offset=-10V screen fileName="exampleSetup.png"
#+END_SRC

#+RESULTS:
: pics/exampleSetup.png

Expect screenshot:
- with two channels 1 and 2 open
- channel 1 offset +10V
- channel 2 offset -5V

[[file:pics/exampleSetup.png]]


*** Embed into ~ebMenu~

Create configuration file ~examples/template/example.yaml~, which
binds ~example~ instrument with example ~hello2~ created in
[[file:HELLO.org]].

#+BEGIN_SRC yaml :tangle examples/template/example.yaml
   # example.yaml - tangled from TEMPLATE.org
   # 
   # Do not edit!! Changes will be overridden

   # Example created in this document
   - 
     type: subMenu
     menu: scope
     prompt: Example oscilloscope 
     module: examples.template.example
     kwargs:
         ip: skooppi

   # Just add second example from HELLO.org
   - 
     type: subMenu
     menu: hello2
     prompt: Start example Hello (instance 2)
     module: examples.hello2.hello2
     kwargs:
         greetCount: 100


#+END_SRC

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
ebMenu --config examples/template/example.yaml --syspath $(pwd) ?
#+END_SRC

#+RESULTS:
#+begin_example
ebMenu: Menu of ebench toolset

Usage: ebMenu [options] [commands and parameters] 

Commands:

          scope  : Example oscilloscope
      instance2  : Start example Hello (instance 2)
              q  : Exit
----------   Other    ----------
              ?  : List commands
             ??  : List command parameters
              !  : Start recording
              .  : Stop recording
#+end_example



* Fin                                                              :noexport:


   # Local Variables:
   # org-confirm-babel-evaluate: nil
   # End:



