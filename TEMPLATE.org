* Ebech  implelementation template
:PROPERTIES:
:TOC:      :include all
:END:


:CONTENTS:
- [[#ebech--implelementation-template][Ebech  implelementation template]]
  - [[#elements-in-example-application][Elements in example application]]
    - [[#imports-t_imports][Imports: <<t_imports>>]]
    - [[#usage-and-help-text-t_usage][Usage and help text: <<t_USAGE>>]]
    - [[#instrument-t_instrumentbase-and-t_instrument][Instrument <<t_InstrumentBase>> and <<t_Instrument>>]]
    - [[#menu-t_menuelements-and-t_menurows][Menu <<t_MenuElements>> and <<t_MenuRows>>]]
    - [[#instrument-constructor-t_constructorparam-and-t_constructorcall][Instrument constructor <<t_constructorParam>> and <<t_constructorCall>>]]
  - [[#template][Template]]
    - [[#apppy][App.py]]
    - [[#app-mainpy][app-main.py]]
  - [[#application-code][Application code]]
    - [[#examplestemplateexamplepy][examples/template/example.py]]
    - [[#examplestemplateexample_mainpy][examples/template/example_main.py]]
  - [[#testing-example][Testing example]]
    - [[#usage-][Usage ?]]
    - [[#command-help----][Command help  - ??]]
      - [[#help-on-commandreset][Help on command=reset]]
      - [[#help-on-commandsetup][Help on command=setup]]
    - [[#command-reset][Command reset]]
    - [[#command-setup-and-screen][Command setup and screen]]
:END:


** Elements in ~example~ application

This chapter defines template place holders = names inside double
angle brackets: ~<<>>~

*** Imports: ~<<t_imports>>~

#+name: t_imports
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*


from ebench import PyInstrument
from ebench import MenuCtrl

from ebench import usage, usageCommand, menuStartRecording, menuStopRecording, menuScreenShot, version

import os
from time import sleep
from absl import logging
#+END_SRC


*** Usage and help text: ~<<t_USAGE>>~

#+name: t_USAGE
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
  CMD="example"

  SYNOPSIS="Example to setup oscilloscope"

  USAGE_TEXT=f""" 
  A minimal running example ebench tool for setting up oscilloscope
  configuration.

  Tested on Rigol MSO1104Z. 
  
  
  """

#+END_SRC


*** Instrument ~<<t_InstrumentBase>>~ and ~<<t_Instrument>>~

*~<<t_InstrumentBase>>~*
#+name: t_InstrumentBase
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*

  class MyBaseException(Exception):
        pass

  class MyConfigurationError(MyBaseException):
        pass
  class MyRuntimeError(MyBaseException):
        pass
 
  class MyBase(PyInstrument):
      """Abstract base class, which inherits from 'PyInstrument' i.e.
      can be controlled using pyvisa.
      """

      # Constructor && setup
      def __init__(self, ip=None):
          logging.info( "MyBase: ip={}".format(ip))
          if ip is None:
              raise MyConfigurationError( "Missing configuration 'ip'")
          self.ip = ip
          # Init pyvisa on address
          addr = "TCPIP0::{}::INSTR".format(ip)
          super().__init__(addr=addr)

      # Destructor && close stuff
      def close(self):
          logging.info( "MyBase: closing all my resources, pass to super")
          super().close()

      # Template implementation
      def screenShotImplementation( self, filePath):
          """Screenshot implementation using lxi command line

          :filePath: path where to save screen shot

          :return: filePath in success, None in error

          """
          cmd = "lxi  screenshot  {} --address {} >/dev/null".format( filePath, self.ip )
          logging.info( "screenShotImplementation: cmd:{}".format(cmd))
          status = os.system(cmd)
          logging.debug( "screenShotImplementation: status={} after {}".format(status,cmd))
          if status != 0:
              msg = "status={} for cmd={}".format(status, cmd)
              logging.error(msg)
              return None
          return filePath



      # Elementary services 
      def baseDelay(self, delay=1):
          """API actions wait allow instrument to settle before next action

          :delay: number of base units to wait before next action

          """
          delayUnit=0.2
          sleep(delay*delayUnit)

      # API services
      def baseReset(self):
          self.pyvisaReset()

      def baseChannelOnOff( self, channel, onOff:None):
          cmd = ":CHAN{}:DISP {}".format(channel,"ON" if onOff else "OFF" )
          return  self.write(cmd)


      def baseChannelScale( self, channel, scale ):
          """Set or query the vertical scale of the specified channel. The
          default unit is V.
          """
          cmd = ":CHAN{}:SCAL {}".format( channel, scale)
          self.write( cmd )

      def baseChannelOffset( self, channel, offset ):
          """Set or query the vertical offset of the specified channel. The
          default unit is V.

          Related to the current vertical scale and probe ratio When the
          probe ratio is 1X, vertical scale≥500mV/div: -100V to +100V
          vertical scale<500mV/div: -2V to +2V When the probe ratio is
          10X, vertical scale≥5V/div: -1000V to +1000V vertical
          scale<5V/div: -20V to +20V
          """
          cmd = ":CHAN{}:OFFSET {}".format( channel, offset)
          self.write( cmd )


      def baseChannelDisplayUnit( self, channel, siUnit ):
          """Set or query the amplitude display unit of the specified channel"""
          def si2ScopeUnit( siUnit):
              unitMapper = {
                  "A": "AMP",
                  "V": "VOLT",
                  "W": "WATT",
              }
              baseUnit = "UNKN"
              try:
                  baseUnit = unitMapper[siUnit]
              except KeyError:
                  pass
              return baseUnit
          cmd = ":CHAN{}:UNIT {}".format( channel,si2ScopeUnit(siUnit))
          self.write(cmd)

      def baseChannelMeasurementStat( self, channel, item ):
          """
          :channel: channel number 1,2,3,4
          """
          cmd = ":MEAS:STAT:ITEM {},CHAN{}".format( item, channel)
          self.write( cmd )


#+END_SRC

*<<t_Instrument>>* 
#+name: t_Instrument
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
  class MyInstrument(MyBase):
      def __init__( self, ip=None):
          super().__init__( ip=ip )

      def reset(self):
          """Reset scope to default state
           reset

          """
          self.baseReset()

      def setup(self, channel, scale=None, offset=None, stats=None ):
          """Setup osciloscope 'channel', measurement scale (scale), screen
          offset (offset), and measurement collection on the screen
          bottm row (stats)

          :scale: Set vertical scale and unit of 'channel', if given (=no
          change if not given). Example: scale=1V.

          :offset: Set offset and unit of channel. No change if not
          given

          :stats: comma separed list of measurement items to start
          collecting in scope bottom row. Empty list does not change
          measurement statistic collection

          Valid measument identifiers: MAX, VMIN, VPP, VTOP, VBASe,
          VAMP, VAVG, VRMS, OVERshoot, MARea, MPARea, PREShoot, PERiod,
          FREQuency, RTIMe, FTIMe, PWIDth, NWIDth, PDUTy, NDUTy, TVMAX,
          TVMIN, PSLEWrate, NSLEWrate, VUPper, VMID, VLOWer, VARIance,
          PVRMS, PPULses, NPULses, PEDGes, and NEDGes

          """
          logging.info( "Setup channel: {}, stats='{}'".format(channel, stats ))
          self.baseChannelOnOff( channel=channel, onOff = True )
          if scale is not None and not not scale:
              (val,siUnit) = self.instrumentValUnit(scale)
              self.baseChannelScale(channel,val)
              self.baseChannelDisplayUnit(channel,siUnit)
          if offset is not None and not not offset:
              (val,siUnit) = self.instrumentValUnit(offset)
              self.baseChannelOffset(channel,val)
              self.baseChannelDisplayUnit(channel,siUnit)
          if stats is not None and not not stats:
              items = stats.split(",")
              for item in items:
                  self.baseChannelMeasurementStat(item=item.upper(), channel=channel)
          self.baseDelay()
#+END_SRC


*** Menu ~<<t_MenuElements>>~ and ~<<t_MenuRows>>~

*<<t_MenuElements>>*
#+name: t_MenuElements
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
CMD_RESET= "reset"
CMD_SETUP= "setup"

channelPar = {
    "channel"  : "Channel 1-4 to act upon"
}

setupPar = channelPar | {
    "scale"    : "Channel scale, value + unit[V,A,W]",
    "offset"   : "Channel offset, value + unit[V,A,W]",
    "stats"    : "Comma -separated list of stat measuremnts",
}

defaults = {
   CMD_SETUP: {
        "offset": "0V"
   }
}
#+END_SRC

*<<t_MenuRows>>*
#+name: t_MenuRows
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
          CMD_RESET                : ( "Send reset to Scope", None, instrument.reset),
          CMD_SETUP                : ( "Setup channel", setupPar, instrument.setup ),
#+END_SRC


*** Instrument constructor ~<<t_constructorParam>>~ and ~<<t_constructorCall>>~

*<<t_constructorParam>>*
#+name: t_constructorParam
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
ip:str=None
#+END_SRC


*<<t_constructorCall>>*
#+name: t_constructorCall
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
instrument = MyInstrument(ip=ip)
#+END_SRC


** Template

*** App.py

#+BEGIN_SRC python :eval no :results output :noweb no :session *Python* :noweb yes :tangle examples/template/example.py :noweb yes :exports code
  <<t_imports>>

  # ------------------------------------------------------------------
  # Usage 

  <<t_USAGE>>

  # ------------------------------------------------------------------
  # Base
  <<t_InstrumentBase>>
  
  # ------------------------------------------------------------------
  # Instrument
  <<t_Instrument>>


  # ------------------------------------------------------------------
  # Menu
  <<t_MenuElements>>


  # ------------------------------------------------------------------
  # Main
  def run( _argv, <<t_constructorParam>>
       , runMenu:bool = True
       , outputTemplate=None, captureDir=None, recordingDir=None ):
      """Examaple template 

      :outputTemplate: CLI configuration, None(default): =execute
      cmds/args, not None: map menu actions to strings using
      'outputTemplate',

      :captureDir: directory where screen shot is mage, defaults to
      'FLAGS.captureDir'

      :runMenu: default True, standalone application call REPL-loop
      'menuController.mainMenu()', subMenu constructs 'menuController'
      without executing the loop

      :return: MenuCtrl (wrapping instrument )

      """

      # 'instrument' controlled by application 
      <<t_constructorCall>> 
      menuController = MenuCtrl( args=_argv,instrument=instrument
                               , prompt="[q=quit,?=commands,??=help on command]"
                               , outputTemplate=outputTemplate )

      mainMenu = {
          CMD                      : MenuCtrl.MENU_SEPATOR_TUPLE,
          # Application menu 
          <<t_MenuRows>>

          "Util"                   : MenuCtrl.MENU_SEPATOR_TUPLE,
          MenuCtrl.MENU_REC_START  : ( "Start recording", None, menuStartRecording(menuController) ),
          MenuCtrl.MENU_REC_SAVE   : ( "Stop recording", MenuCtrl.MENU_REC_SAVE_PARAM, menuStopRecording(menuController, recordingDir=recordingDir) ),
          MenuCtrl.MENU_SCREEN     : ( "Take screenshot", MenuCtrl.MENU_SCREENSHOT_PARAM,
                                       menuScreenShot(instrument=instrument,captureDir=captureDir,prefix="Capture-" )),
          MenuCtrl.MENU_HELP       : ( "List commands", None,
                                      lambda **argV: usage(cmd=CMD, mainMenu=mainMenu, synopsis=SYNOPSIS, usageText=USAGE_TEXT)),
          MenuCtrl.MENU_HELP_CMD   : ( "List command parameters", MenuCtrl.MENU_HELP_CMD_PARAM,
                                   lambda **argV: usageCommand(mainMenu=mainMenu, **argV )),
          "Quit"                   : MenuCtrl.MENU_SEPATOR_TUPLE,
          MenuCtrl.MENU_QUIT       : MenuCtrl.MENU_QUIT_TUPLE,
          # Hidden commands
          MenuCtrl.MENU_VERSION    : ( "Output version number", None, version ),
      }


      menuController.setMenu( menu = mainMenu, defaults = defaults)

      if runMenu: menuController.mainMenu()

      return menuController
#+END_SRC


*** app-main.py

#+BEGIN_SRC python :eval no :results output :noweb no :session *Python* :noweb yes :tangle examples/template/example_main.py :noweb yes :exports code :noweb yes :shebang "#!/usr/bin/env python3"
from example import run

from absl import app, flags, logging
from absl.flags import FLAGS

flags.DEFINE_string('ip', None, "IP -address of device")

def _main( _argv ):
    logging.set_verbosity(FLAGS.debug)
    menuController = run( _argv, ip=FLAGS.ip, captureDir=FLAGS.captureDir, recordingDir=FLAGS.recordingDir, outputTemplate=FLAGS.outputTemplate  )
    menuController.close()


def main():
    try:
        app.run(_main)
    except SystemExit:
        pass
    
    
if __name__ == '__main__':
    main()

#+END_SRC


** Application code

This chater present the two application modules generated:

*** ~examples/template/example.py~

#+BEGIN_SRC bash :eval no-export :results output :exports results
cat examples/template/example.py
#+END_SRC

#+RESULTS:
#+begin_example
from ebench import PyInstrument
from ebench import MenuCtrl

from ebench import usage, usageCommand, menuStartRecording, menuStopRecording, menuScreenShot, version

import os
from time import sleep
from absl import logging

# ------------------------------------------------------------------
# Usage 

CMD="example"

SYNOPSIS="Example to setup oscilloscope"

USAGE_TEXT=f""" 
A minimal running example ebench tool for setting up oscilloscope
configuration.

Tested on Rigol MSO1104Z. 


"""


# ------------------------------------------------------------------
# Base

class MyBaseException(Exception):
      pass

class MyConfigurationError(MyBaseException):
      pass
class MyRuntimeError(MyBaseException):
      pass

class MyBase(PyInstrument):
    """Abstract base class, which inherits from 'PyInstrument' i.e.
    can be controlled using pyvisa.
    """

    # Constructor && setup
    def __init__(self, ip=None):
        logging.info( "MyBase: ip={}".format(ip))
        if ip is None:
            raise MyConfigurationError( "Missing configuration 'ip'")
        self.ip = ip
        # Init pyvisa on address
        addr = "TCPIP0::{}::INSTR".format(ip)
        super().__init__(addr=addr)

    # Destructor && close stuff
    def close(self):
        logging.info( "MyBase: closing all my resources, pass to super")
        super().close()

    # Template implementation
    def screenShotImplementation( self, filePath):
        """Screenshot implementation using lxi command line

        :filePath: path where to save screen shot

        :return: filePath in success, None in error

        """
        cmd = "lxi  screenshot  {} --address {} >/dev/null".format( filePath, self.ip )
        logging.info( "screenShotImplementation: cmd:{}".format(cmd))
        status = os.system(cmd)
        logging.debug( "screenShotImplementation: status={} after {}".format(status,cmd))
        if status != 0:
            msg = "status={} for cmd={}".format(status, cmd)
            logging.error(msg)
            return None
        return filePath



    # Elementary services 
    def baseDelay(self, delay=1):
        """API actions wait allow instrument to settle before next action

        :delay: number of base units to wait before next action

        """
        delayUnit=0.2
        sleep(delay*delayUnit)

    # API services
    def baseReset(self):
        self.pyvisaReset()

    def baseChannelOnOff( self, channel, onOff:None):
        cmd = ":CHAN{}:DISP {}".format(channel,"ON" if onOff else "OFF" )
        return  self.write(cmd)


    def baseChannelScale( self, channel, scale ):
        """Set or query the vertical scale of the specified channel. The
        default unit is V.
        """
        cmd = ":CHAN{}:SCAL {}".format( channel, scale)
        self.write( cmd )

    def baseChannelOffset( self, channel, offset ):
        """Set or query the vertical offset of the specified channel. The
        default unit is V.

        Related to the current vertical scale and probe ratio When the
        probe ratio is 1X, vertical scale≥500mV/div: -100V to +100V
        vertical scale<500mV/div: -2V to +2V When the probe ratio is
        10X, vertical scale≥5V/div: -1000V to +1000V vertical
        scale<5V/div: -20V to +20V
        """
        cmd = ":CHAN{}:OFFSET {}".format( channel, offset)
        self.write( cmd )


    def baseChannelDisplayUnit( self, channel, siUnit ):
        """Set or query the amplitude display unit of the specified channel"""
        def si2ScopeUnit( siUnit):
            unitMapper = {
                "A": "AMP",
                "V": "VOLT",
                "W": "WATT",
            }
            baseUnit = "UNKN"
            try:
                baseUnit = unitMapper[siUnit]
            except KeyError:
                pass
            return baseUnit
        cmd = ":CHAN{}:UNIT {}".format( channel,si2ScopeUnit(siUnit))
        self.write(cmd)

    def baseChannelMeasurementStat( self, channel, item ):
        """
        :channel: channel number 1,2,3,4
        """
        cmd = ":MEAS:STAT:ITEM {},CHAN{}".format( item, channel)
        self.write( cmd )



# ------------------------------------------------------------------
# Instrument
class MyInstrument(MyBase):
    def __init__( self, ip=None):
        super().__init__( ip=ip )

    def reset(self):
        """Reset scope to default state
         reset

        """
        self.baseReset()

    def setup(self, channel, scale=None, offset=None, stats=None ):
        """Setup osciloscope 'channel', measurement scale (scale), screen
        offset (offset), and measurement collection on the screen
        bottm row (stats)

        :scale: Set vertical scale and unit of 'channel', if given (=no
        change if not given). Example: scale=1V.

        :offset: Set offset and unit of channel. No change if not
        given

        :stats: comma separed list of measurement items to start
        collecting in scope bottom row. Empty list does not change
        measurement statistic collection

        Valid measument identifiers: MAX, VMIN, VPP, VTOP, VBASe,
        VAMP, VAVG, VRMS, OVERshoot, MARea, MPARea, PREShoot, PERiod,
        FREQuency, RTIMe, FTIMe, PWIDth, NWIDth, PDUTy, NDUTy, TVMAX,
        TVMIN, PSLEWrate, NSLEWrate, VUPper, VMID, VLOWer, VARIance,
        PVRMS, PPULses, NPULses, PEDGes, and NEDGes

        """
        logging.info( "Setup channel: {}, stats='{}'".format(channel, stats ))
        self.baseChannelOnOff( channel=channel, onOff = True )
        if scale is not None and not not scale:
            (val,siUnit) = self.instrumentValUnit(scale)
            self.baseChannelScale(channel,val)
            self.baseChannelDisplayUnit(channel,siUnit)
        if offset is not None and not not offset:
            (val,siUnit) = self.instrumentValUnit(offset)
            self.baseChannelOffset(channel,val)
            self.baseChannelDisplayUnit(channel,siUnit)
        if stats is not None and not not stats:
            items = stats.split(",")
            for item in items:
                self.baseChannelMeasurementStat(item=item.upper(), channel=channel)
        self.baseDelay()


# ------------------------------------------------------------------
# Menu
CMD_RESET= "reset"
CMD_SETUP= "setup"

channelPar = {
    "channel"  : "Channel 1-4 to act upon"
}

setupPar = channelPar | {
    "scale"    : "Channel scale, value + unit[V,A,W]",
    "offset"   : "Channel offset, value + unit[V,A,W]",
    "stats"    : "Comma -separated list of stat measuremnts",
}

defaults = {
   CMD_SETUP: {
        "offset": "0V"
   }
}


# ------------------------------------------------------------------
# Main
def run( _argv, ip:str=None
     , runMenu:bool = True, 
     , outputTemplate=None, captureDir=None, recordingDir=None ):
    """Examaple template 

    :outputTemplate: CLI configuration, None(default): =execute
    cmds/args, not None: map menu actions to strings using
    'outputTemplate',

    :captureDir: directory where screen shot is mage, defaults to
    'FLAGS.captureDir'

    :runMenu: default True, standalone application call REPL-loop
    'menuController.mainMenu()', subMenu constructs 'menuController'
    without executing the loop

    :return: MenuCtrl (wrapping instrument )

    """

    # 'instrument' controlled by application 
    instrument = MyInstrument(ip=ip) 
    menuController = MenuCtrl( args=_argv,instrument=instrument
                             , prompt="[q=quit,?=commands,??=help on command]"
                             , outputTemplate=outputTemplate )

    mainMenu = {
        CMD                      : MenuCtrl.MENU_SEPATOR_TUPLE,
        # Application menu 
        CMD_RESET                : ( "Send reset to Scope", None, instrument.reset),
        CMD_SETUP                : ( "Setup channel", setupPar, instrument.setup ),

        "Util"                   : MenuCtrl.MENU_SEPATOR_TUPLE,
        MenuCtrl.MENU_REC_START  : ( "Start recording", None, menuStartRecording(menuController) ),
        MenuCtrl.MENU_REC_SAVE   : ( "Stop recording", MenuCtrl.MENU_REC_SAVE_PARAM, menuStopRecording(menuController, recordingDir=recordingDir) ),
        MenuCtrl.MENU_SCREEN     : ( "Take screenshot", MenuCtrl.MENU_SCREENSHOT_PARAM,
                                     menuScreenShot(instrument=instrument,captureDir=captureDir,prefix="Capture-" )),
        MenuCtrl.MENU_HELP       : ( "List commands", None,
                                    lambda **argV: usage(cmd=CMD, mainMenu=mainMenu, synopsis=SYNOPSIS, usageText=USAGE_TEXT)),
        MenuCtrl.MENU_HELP_CMD   : ( "List command parameters", MenuCtrl.MENU_HELP_CMD_PARAM,
                                 lambda **argV: usageCommand(mainMenu=mainMenu, **argV )),
        "Quit"                   : MenuCtrl.MENU_SEPATOR_TUPLE,
        MenuCtrl.MENU_QUIT       : MenuCtrl.MENU_QUIT_TUPLE,
        # Hidden commands
        MenuCtrl.MENU_VERSION    : ( "Output version number", None, version ),
    }


    menuController.setMenu( menu = mainMenu, defaults = defaults)

    if runMenu: menuController.mainMenu()

    return menuController
#+end_example


*** ~examples/template/example_main.py~

#+BEGIN_SRC bash :eval no-export :results output :exports results
cat examples/template/example_main.py
#+END_SRC

#+RESULTS:
#+begin_example
#!/usr/bin/env python3
from example import run

from absl import app, flags, logging
from absl.flags import FLAGS

flags.DEFINE_string('ip', None, "IP -address of device")

def _main( _argv ):
    logging.set_verbosity(FLAGS.debug)
    menuController = run( _argv, ip=FLAGS.ip, captureDir=FLAGS.captureDir, recordingDir=FLAGS.recordingDir, outputTemplate=FLAGS.outputTemplate  )
    menuController.close()


def main():
    try:
        app.run(_main)
    except SystemExit:
        pass
    
    
if __name__ == '__main__':
    main()
#+end_example


** Testing ~example~ 

Command to execute tests

#+name: exampleCmd
#+BEGIN_SRC bash :eval no
examples/template/example_main.py --ip=skooppi
#+END_SRC


*** Usage ~?~

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<exampleCmd>> ?
#+END_SRC

#+RESULTS:
#+begin_example
example: Example to setup oscilloscope

Usage: example [options] [commands and parameters] 

Commands:

----------  example   ----------
          reset  : Send reset to Scope
          setup  : Setup channel
----------    Util    ----------
              !  : Start recording
              .  : Stop recording
         screen  : Take screenshot
              ?  : List commands
             ??  : List command parameters
----------    Quit    ----------
              q  : Exit
 
A minimal running example ebench tool for setting up oscilloscope
configuration.

Tested on Rigol MSO1104Z. 



#+end_example


*** Command help  - ~??~
    
**** Help on ~command=reset~

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<exampleCmd>> ?? command=reset
#+END_SRC

#+RESULTS:
#+begin_example
reset - Send reset to Scope

Reset scope to default state
reset

,*No parameters*

Notice:
- parameters MUST be given in the order listed above
- parameters are optional and they MAY be left out
#+end_example



**** Help on ~command=setup~

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<exampleCmd>> ?? command=setup
#+END_SRC

#+RESULTS:
#+begin_example
setup - Setup channel

Setup osciloscope 'channel', measurement scale (scale), screen
offset (offset), and measurement collection on the screen
bottm row (stats)

:scale: Set vertical scale and unit of 'channel', if given (=no
change if not given). Example: scale=1V.

:offset: Set offset and unit of channel. No change if not
given

:stats: comma separed list of measurement items to start
collecting in scope bottom row. Empty list does not change
measurement statistic collection

Valid measument identifiers: MAX, VMIN, VPP, VTOP, VBASe,
VAMP, VAVG, VRMS, OVERshoot, MARea, MPARea, PREShoot, PERiod,
FREQuency, RTIMe, FTIMe, PWIDth, NWIDth, PDUTy, NDUTy, TVMAX,
TVMIN, PSLEWrate, NSLEWrate, VUPper, VMID, VLOWer, VARIance,
PVRMS, PPULses, NPULses, PEDGes, and NEDGes

   channel  : Channel 1-4 to act upon
     scale  : Channel scale, value + unit[V,A,W]
    offset  : Channel offset, value + unit[V,A,W]
     stats  : Comma -separated list of stat measuremnts

Notice:
- parameters MUST be given in the order listed above
- parameters are optional and they MAY be left out
#+end_example


*** Command ~reset~

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<exampleCmd>> reset
#+END_SRC

#+RESULTS:


*** Command ~setup~ and ~screen~ 

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<exampleCmd>> setup channel=1 scale=5V offset=10V setup channel=2 scale=5V offset=-10V screen fileName="exampleSetup.png"
#+END_SRC

#+RESULTS:
: pics/exampleSetup.png

Expect screenshot:
- with two channels 1 and 2 open
- channel 1 offset +10V
- channel 2 offset -5V

[[file:pics/exampleSetup.png]]


* Fin                                                              :noexport:


   # Local Variables:
   # org-confirm-babel-evaluate: nil
   # End:



