
* ebench - An extensible toolset to control e-instruments $Release:0.0.10-SNAPSHOT$
:PROPERTIES:
:TOC:      :include all
:END:

:CONTENTS:
- [[#ebench---an-extensible-toolset-to-control-e-instruments-release0010-snapshot][ebench - An extensible toolset to control e-instruments $Release:0.0.10-SNAPSHOT$]]
  - [[#problem-statement][Problem Statement]]
  - [[#study-of-viability-in--ebench--toolset][Study of Viability in  ebench -Toolset]]
    - [[#ebmenu][ebMenu]]
    - [[#ebunit][ebUnit]]
    - [[#ebrigol][ebRigol]]
  - [[#tbd-architecture][TBD Architecture]]
  - [[#documentation-references][Documentation references]]
  - [[#tbd-installation][TBD Installation]]
    - [[#clone-repo-httpsgithubcomjarjukebench][Clone repo https://github.com/jarjuk/ebench]]
    - [[#show-version][Show version]]
    - [[#show-releases-notes][Show releases notes]]
    - [[#install][Install]]
    - [[#check-installation][Check installation]]
    - [[#check-list-resources][Check list resources]]
    - [[#use-it][Use it]]
  - [[#tbd-usage][TBD Usage]]
    - [[#interactive-usage][Interactive usage]]
    - [[#command-line-usage][Command line usage]]
    - [[#api-usage][API usage]]
:END:

** Problem Statement

- As a hobby electronics need to control diverse electronic instruments
  - to set up instruments in various configurations
  - to collect data in projects for further processing and
    documentation

- with the objective to reap benefits
  - ab initio by having configuration setups and data collection
    actions documented
  - and thenceforth being able to automate setup construction and data
    collection with the help of scripts

- with gently sloping adoption curve
  - incorporatin  instrument at the time, when need arises
  - without too much need of upfront investments in infrastructure

- as as on-going work to integrate tools created by
  - fellow hobbyists
  - future me

- into an electronic instrumentation system with characterized by
  - strict focus on instrument setup and data collection
  - ease of use 
  - low maintenance
  - high flexibility
  - and high service value


** Study of Viability in  ~ebench~ -Toolset

   The vision presented in the previous chapter is abstract and it
   must be materialized for implementation.  Meet ~ebench~ -toolset, a
   viability study, which, at this time, comprises following three
   tools:

   - ~ebMenu~ : Menu of ebench toolset
   - ~ebUnit~ : Tool to control UNIT-T UTG962/932 Waveform generator
   - ~ebRigol~ : Tool to control Rigol MSO1104Z osciloscope

   Characteristics of ~ebench~ toolset lists:
   - scope core architecture to the minimum and identify a set of
     infrastructure services
   - interactive, command line and API -interfaces implementable in
     one go
   - use Python as core implementation language and existing libraries
     for [[https://pyvisa.readthedocs.io/en/latest/][instrument integrations]] and [[https://pypi.org/project/absl-py/][configuration]] interfaces

   List of features mainained in [[file:FEATURES.org]]

*** ~ebMenu~
#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports results
ebMenu ?
#+END_SRC

#+RESULTS:
#+begin_example
ebMenu: Menu of ebench toolset

Usage: ebMenu [options] [commands and parameters] 

Commands:

        skooppi  : Rigol osciloscope control
           sgen  : UNIT-T UTG962 signal generator control
       counters  : Read hello.py counters
   counters2csv  : Save hello.py counters to example.csv
              q  : Exit
----------   Other    ----------
              ?  : List commands
             ??  : List command parameters
              !  : Start recording
              .  : Stop recording
#+end_example


*** ~ebUnit~

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports results
ebUnit ?
#+END_SRC

#+RESULTS:
#+begin_example
ebUnit: Tool to control UNIT-T UTG962/932 Waveform generator

Usage: ebUnit [options] [commands and parameters] 

Commands:

           sine  : Generate sine -wave on channel 1|2
         square  : Generate square -wave on channel 1|2
          pulse  : Generate pulse -wave on channel 1|2
           ramp  : Generate ramp -wave on channel 1|2
            arb  : Upload wave file and use it to generate wave on channel 1|2
             on  : Switch on channel 1|2
            off  : Switch off channel 1|2
          reset  : Send reset to UTG900 signal generator
----------   Record   ----------
              !  : Start recording
              .  : Stop recording
         screen  : Take screenshot
 list_resources  : List pyvisa resources (=pyvisa list_resources() wrapper)'
----------    Help    ----------
              q  : Exit
              ?  : List commands
             ??  : List command parameters

More help:
  ebUnit --help                          : to list options
  ebUnit ? command=<command>             : to get help on command <command> parameters

Examples:
  ebUnit ? command=sine                  : help on sine command parameters
  ebUnit list_resources                  : Identify --addr option parameter
  ebUnit --addr 'USB0::1::2::3::0::INSTR': Run interactively on device found in --addr 'USB0::1::2::3::0::INSTR'
  ebUnit --captureDir=pics screen        : Take screenshot to pics directory (form device in default --addr)
  ebUnit reset                           : Send reset to UTH900 waveform generator
  ebUnit sine channel=2 freq=2kHz        : Generate 2 kHz sine signal on channel 2
  ebUnit sine channel=1 square channel=2 : chaining sine generation on channel 1, and square generation on channel 2

Hint:
  Run reset to synchronize ebUnit -tool with device state. Ref= ?? command=reset
  One-liner in linux: ebUnit --addr $(ebUnit list_resources)


#+end_example



*** ~ebRigol~

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports results
ebRigol ?
#+END_SRC

#+RESULTS:
#+begin_example
ebRigol: Tool to control Rigol MSO1104Z osciloscope

Usage: ebRigol [options] [commands and parameters] 

Commands:

----------    Init    ----------
        general  : General setup
          setup  : Setup channel
   setupTrigger  : Setup trigger
       timebase  : Setup timebase
       podSetup  : Setup digical channels
         podOff  : Setup digical channels
             on  : Open channel
            off  : Close channel
           stat  : Set statistics
      statClear  : Clear statistics
          reset  : Send reset to Rigol
          clear  : Send clear to Rigol
----------  Measure   ----------
        measure  : Measure
----------   Record   ----------
              !  : Start recording
              .  : Stop recording
         screen  : Take screenshot
----------    Help    ----------
              q  : Exit
              ?  : List commands
             ??  : List command parameters
#+end_example



** *TBD* Architecture 

*TBD*

** Documentation references

- Hello World example:  [[file:HELLO.org]]
- Hello World example integrated with ~ebMenu~: [[file:EBMENU.org]]
- BDD testig document for ~ebUnit~ -tool: [[file:ebUnit.org]]
- ~ebench~ -toolset


** *TBD* Installation
   :PROPERTIES:
   :header-args:bash: :dir  tmp
   :END:

*TBD*

*** Clone repo ~https://github.com/jarjuk/ebench~

 #+BEGIN_SRC bash :eval no-export :results output
 git clone https://github.com/jarjuk/ebench
 #+END_SRC


*** Show version

 #+BEGIN_SRC bash :eval no-export :results output
 cat ebench/VERSION
 #+END_SRC

 #+RESULTS:


*** Show releases notes

 #+BEGIN_SRC bash :eval no :results output
 cat ebench/RELEASES.md
 #+END_SRC


*** Install
    :PROPERTIES:
    :header-args:bash: :dir  tmp/ebench
    :END:

 In ~ebench~ directory 

 #+BEGIN_SRC 
 cd ebench
 #+END_SRC

 create distribution package into ~dist~ -directory

  #+BEGIN_SRC bash :eval no-export :results output :exports code
  python3 setup.py  sdist  bdist_wheel
  #+END_SRC


 and install the latest version 

  #+BEGIN_SRC bash :eval no-export :results output
  VERSION_FILE=$(ls -1tr dist/*.tar.gz | tail -1| cut -f2)
  echo VERSION_FILE=$VERSION_FILE
  python3 -m pip install --user $VERSION_FILE  && echo installed $VERSION_FILE
  #+END_SRC


*** Check installation

 Run 

 #+BEGIN_SRC bash :eval no-export :results output :noweb yes
 <<ebMenu>> _version
 #+END_SRC

 #+RESULTS:
 : 0.0.10-pre2


*** Check list resources 

 Use command ~_list_resources~ to list VISA resource found by pyvisa tool 

 #+name: list_resources
 #+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
  <<ebMenu>> _list_resources
 #+END_SRC

 In development environment it returns:

 #+RESULTS: list_resources
 : ('USB0::26198::2100::1485061822::0::INSTR',)


*** Use it






** *TBD* Usage

*TDB*

*** Interactive usage

~ebench~ -tools  should give usage instructions with ~?~ -command.

For example running 

#+BEGIN_SRC bash :eval no-export :results output :exports both :noweb yes
cat <<EOF | ebMenu
?
q
EOF
#+END_SRC

#+RESULTS:
#+begin_example
[?=help, q=quit] > ebMenu: Menu of ebench toolset

Usage: ebMenu [options] [commands and parameters] 

Commands:

        skooppi  : Rigol osciloscope control
           sgen  : UNIT-T UTG962 signal generator control
       counters  : Read hello.py counters
   counters2csv  : Save hello.py counters to example.csv
              q  : Exit
----------   Other    ----------
              ?  : List commands
             ??  : List command parameters
              !  : Start recording
              .  : Stop recording
[?=help, q=quit] > 
#+end_example


*** Command line usage

#+BEGIN_SRC bash :eval no-export :results output :noweb yes
<<ebMenu>> ? 
#+END_SRC

#+RESULTS:
#+begin_example
ebMenu: Menu of ebench toolset

Usage: ebMenu [options] [commands and parameters] 

Commands:

        skooppi  : Rigol osciloscope control
           sgen  : UNIT-T UTG962 signal generator control
       counters  : Read hello.py counters
   counters2csv  : Save hello.py counters to example.csv
              q  : Exit
----------   Other    ----------
              ?  : List commands
             ??  : List command parameters
              !  : Start recording
              .  : Stop recording
#+end_example


*** API usage


* Fin                                                              :noexport:


   # Local Variables:
   # org-confirm-babel-evaluate: nil
   # End:



