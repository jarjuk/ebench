* enbench - Tool to control e-instruments $Release:0.0.10-SNAPSHOT$


* Requirements

- [X] Simple scripting
  - [X] Use the tool interactively
  - [X] Save interactive session to script file
    - [X] Start recording function
    - [X] Stop recording (=save) function
  - [X] Possible to execute saved script from CLI
- [X] Interactive use guided by prompts REPL cycle
  - [X] Menu commands 
  - [X] Default value for menu command parameters
  - [X] Prompt for menu  command parameters and input
  - [X] Update default value for menu command parameter
  - [X] Execute menu command and present result to user
- [X] Help for interactive usage 
  - [X] Menu commant prompts
    - [X] Menu configuration: dict mapping  menu command: -> (prompt, menu command parameters, menu action)
    - [X] Menu configuration: group separator 
  - [X] List of menu commands (?-menu selection)
  - [X] Document menu command  (??-menu selection)
    - [X] Topic: menu command prompt
    - [X] Menu command synopsis take from Python doc-string
    - [X] Menu command parameters 
- [X] Merge individual instrument management scripts together
  - [X] Define  instrument management scripts as a submenu (YAML configuration)
    - [X] Define menu command for instrument management script
    - [X] Define menu command prompt for instrument management script
    - [X] Define Python module providing entry point for instrument management script
    - [X] Call /run( argv, runMenu:bool=True, **kwargs )/ to construct instrument management script instance
    - [X] Expect instrument management to implment /MenuCtrl/ ja /Instrument/ -classes (ref architecture)
  - [X] Merge individual instrument management API interfaces together
    - [X] Define menu action for API calls (YAML configuration)
      - [X] Define menu command for API call
      - [X] Define menu command prompt for API call
      - [X] Define API calls
        - [X] Name instrument menu command
        - [X] Name api method to invoke
        - [X] Define API literal parameters
      - [X] Optional CSV file to append API call result into
- [X] infrastructure services for Instrument management scripts
  - [X] Menu structure
  - [X] List of menu commands in menu structure  (help-?)
  - [X] Document menu command (help-??)
  - [X] Start and stop recording 
    - [X] Append menu commands into script file
    - [X] Merge menu commands of separate Instrument management scripts together
  - [X] CSV-file write
    - [X] JSON record defines header and values
  - [X] Configurable composition (--config YAML-file)
    - [X] Instrument management scripts as a sub menu
    - [X] Merge instrument management script API together into JSON record
  - [X] Ask user to provide data
    - [X] Input channel USER
  - [X] Screenshot 
    - [X] Screenshot implementation using  lxi interface
    - [X] Extension point for implementing instrument specific screen shot
    - [X] Common interface for defining screenshot directory/generating file name
- [X] Arkkitecture
  - [X] Instrument (infra) <|-- xxInstrument (API-action) <|-- ebXXX (setup)
  - [X] MenuCtrl *-- Instrument
- [-] Examples (ja BDD-testaus)
  - [X] HELLO.org
  - [ ] EBMENU.org
  - [ ] EBRIGOL.org
  - [ ] EBUNIT.org
  - [ ] idea (käyttöliittymä, ei integraatiota) https://github.com/jarjuk/UTG900

- [X] Current status
  - [X] ebRigol
  - [X] ebUTG962 (Unit-T UTG962 signaaligeneraattori)
  - [X] ebMenu integroityökalu (YAML-konfiguraatio)
  - [X] STM32 RS323 menu-komentointeraatio



* References


Ref: https://github.com/vuthalab/RigolInstruments/blob/master/RigolInstruments.py
Ref: [[file:~/work/data-sheets/skoopit/Rigol-mso1000z_series-programming-guide.pdf]]
Ref: [[file:~/work/data-sheets/skoopit]]




* Ref

Ref: https://github.com/vuthalab/RigolInstruments/blob/master/RigolInstruments.py
Ref: [[file:~/work/data-sheets/skoopit/Rigol-mso1000z_series-programming-guide.pdf]]

   [[file:~/work/data-sheets/skoopit]]



