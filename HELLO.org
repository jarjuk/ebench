* Hello World Examples
:PROPERTIES:
:TOC:      :include all
:END:

This document presents two hello world examples:
1) Stand alone Hello World
2) Hello World as an instrument controller, which can be integrated
   with other instrument controllers to ~ebMenu~

:CONTENTS:
- [[#hello-world-examples][Hello World Examples]]
- [[#stand-alone-hello-world---hellopy][Stand Alone Hello World - hello.py]]
  - [[#imports][Imports]]
  - [[#define-hello--function-and-parameter-prompt][Define hello -function and parameter prompt]]
  - [[#define-menu][Define menu]]
  - [[#wrap-hello-to-an-executable-script][Wrap hello to an executable script]]
  - [[#complete-hellopy][Complete hello.py]]
  - [[#runnig-hellopy][Runnig hello.py]]
    - [[#hello-interctive-usage][hello interctive usage]]
    - [[#hello-cli-usage][hello CLI usage]]
- [[#hello-world-as-an-instrument-controller---hello2py][Hello World as an Instrument Controller - hello2.py]]
  - [[#elements-in-hello2-application][Elements in hello2 application]]
    - [[#import-services-from-ebench-t_imports_ebench][Import services from ebench: <<t_imports_ebench>>]]
    - [[#define-usage-and-help-texts-t_usage][Define usage and help texts: <<t_USAGE>>]]
    - [[#implement-instrument-controller-classes-t_instrumentapi-and-t_instrumentfacade][Implement Instrument controller classes: <<t_InstrumentApi>> and <<t_InstrumentFacade>>]]
    - [[#define-menu-commands-and-parameters-t_menuelements-and-t_menurows][Define menu commands and parameters: <<t_MenuElements>> and <<t_MenuRows>>]]
    - [[#construct-instrument-controller--t_constructorparam-and-t_constructorcall][Construct instrument controller:  <<t_constructorParam>> and <<t_constructorCall>>]]
    - [[#define-runtime-configuration-and-main--function-t_confdef-and-t_confparam][Define runtime configuration and main -function: <<t_confDef>> and <<t_confParam>>]]
  - [[#templates-to-produce-instrument-controller-application][Templates to produce instrument controller application]]
    - [[#instrument-controller-implementation-apppy][Instrument controller implementation: app.py]]
    - [[#instrument-controller-run-time-configuration-and-standalone-main-app-mainpy][Instrument controller run time configuration and standalone main: app-main.py]]
  - [[#hello2-application][hello2 application]]
    - [[#hello2py][hello2.py]]
    - [[#hello2_mainpy][hello2_main.py]]
    - [[#__init__py-and-directory-list][__init__.py and directory list]]
  - [[#running-hello2][Running hello2]]
    - [[#configuration-parameters-with---help][Configuration parameters with --help]]
    - [[#usage-help-and-listing-commands-with-][Usage help and listing commands with ?]]
    - [[#hidden-commands][Hidden commands]]
    - [[#help-on-a-specific-command-][Help on a specific command: ??]]
    - [[#default-value-of-a-parameter][Default value of a parameter]]
    - [[#object-state-is-managed-and-parameter-values-are-remembered][Object state is managed and parameter values are remembered]]
    - [[#use-command-line-configuration-for-intialization][Use command line configuration for intialization]]
:END:


* Stand Alone Hello World - ~hello.py~

** Imports
   :PROPERTIES:
   :header-args:bash: :dir  examples/hello
   :END:

Hello -example uses ~MenuCtrl~ class from ~ebench~ module

 #+name: import
 #+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
 from ebench import MenuCtrl
 #+END_SRC

 #+RESULTS: import
 : Python 3.9.1 | packaged by conda-forge | (default, Jan 10 2021, 02:55:42) 
 : [GCC 9.3.0] on linux
 : Type "help", "copyright", "credits" or "license" for more information.

and some basic infrastructure services from ~os~ module and command
line options from ~absl~

 #+name: import-env
 #+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python*
 import os
 from absl import app, flags, logging
 from absl.flags import FLAGS
 #+END_SRC

 #+RESULTS: import-env


** Define ~hello~ -function and parameter prompt

Define Python function ~hello~ with a parameter ~whom~, which gives
whom to greet:

 #+name: hello
 #+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
 def hello( whom:str ):
     print( "Hello {}".format(whom))
 #+END_SRC

For prompting ~"Whom to greet?"~ define a dictionary, which maps
~whom~ parameter to a promp presented to user in menu REPL -loop:

 #+name: helloPar
 #+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
 helloPar = {
    "whom": "Whom to greet?"
 }
 #+END_SRC



** Define menu

Define a menu command for invoking ~hello~ function and allowing user
to quit the appplication with menu command ~MenuCtrl.MENU_QUIT~
(mapped to letter ~q~).

Menu is defined as dictionary mapping menu command to a 3-tuple. The
tuple elements are 0: /prompt presented to user/, 1: /menu action
parameters/, and 3: /function to execute the menu action/.

 #+name: menu
 #+BEGIN_SRC python :eval no :results output :noweb no :session *Python*

     mainMenu = {
         "hello"                 : ( "Say hello", helloPar, hello),
         MenuCtrl.MENU_QUIT      : MenuCtrl.MENU_QUIT_TUPLE,
     }
 #+END_SRC


** Wrap hello to an executable script

To create an executable script first define function ~_main~, which
constructs ~MenuCtrl~ object and configures main prompt presented to
user. Passing ~_arvg~ parameter to constructor allows application
interactive and CLI usage.  Method ~setMenu~ configures menu presented
user and application REPL cycle is executed within ~mainMenu()~
-method.

 #+name: _main
 #+BEGIN_SRC python :eval no :results output :noweb no :session *Python* :noweb yes
 def _main( _argv ):
     # configure logger
     logging.set_verbosity(FLAGS.debug)

     # Construct 'menuController' 
     menuController = MenuCtrl(args=_argv,prompt="[hello, q=quit]")
     
     # and configure menu
     menuController.setMenu(mainMenu)

     # start executing
     menuController.mainMenu()

 #+END_SRC

Finalize application with following code, which basically calls
~_main~ after absl context is setup correctly.

 #+name: main
 #+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
 def main():
     try:
         app.run(_main)
     except SystemExit:
         pass
    
    
 if __name__ == '__main__':
     main()

 #+END_SRC


** Complete ~hello.py~

 #+BEGIN_SRC python :eval no :results output :noweb no :session *Python* :tangle examples/hello/hello.py :noweb yes :shebang "#!/usr/bin/env python3" :exports none
 <<import>>

 <<import-env>>

 <<hello>>

 <<helloPar>>

 <<menu>>

 <<_main>>

 <<main>>

 #+END_SRC

Complete ~hello~ example is shown below:

#+BEGIN_SRC bash :eval no :results output :exports results
cat examples/hello/hello.py
#+END_SRC

#+RESULTS:
#+begin_example
#!/usr/bin/env python3
import ebench
from ebench import MenuCtrl



import os
from absl import app, flags, logging
from absl.flags import FLAGS

def hello( whom:str ):
    print( "Hello {}".format(whom))

helloPar = {
   "whom": "Whom to greet?"
}


mainMenu = {
    "hello"                 : ( "Say hello", helloPar, hello),
    MenuCtrl.MENU_QUIT      : ( "Exit", None, None),
}

def _main( _argv ):
    # global gSkooppi
    logging.set_verbosity(FLAGS.debug)

    cmdController = MenuCtrl()

    cmdController.mainMenu( _argv, menu=mainMenu, mainPrompt="[hello, q=quit]")






def main():
    try:
        app.run(_main)
    except SystemExit:
        pass


if __name__ == '__main__':
    main()
#+end_example


** Runnig ~hello.py~

*** =hello= interctive usage

 Interactive usage demonstrated using HERE-document. The following
 example prompts user whom to greet, and after the answer, ~moon~,
 greets the moon.

 #+BEGIN_SRC bash :eval no-export :results output :exports both
   cat <<EOF | examples/hello/hello.py
   hello
   moon
   q
   EOF
 #+END_SRC

 #+RESULTS:
 : [hello, q=quit] > Whom to greet? > Hello moon
 : [hello, q=quit] > 


*** =hello= CLI usage

 for Command line usage, menu command 'hello' is followed by key-value
 pair ~whom=World~. The result greets the world.

 #+BEGIN_SRC bash :eval no-export :results output :exports both
 examples/hello/hello.py hello whom=World
 #+END_SRC

 #+RESULTS:
 : Hello World


 :PROPERTIES:
 :TOC:      :include all
 :END:

 :CONTENTS:

 :END:


* Hello World as an Instrument Controller - ~hello2.py~ 

~hello2~ example uses same template structure as a more involved
example presented in [[file:TEMPLATE.org]]. The difference between these
two examples being that ~hello2~ -example does require a physical
instrument for execution.

This Hello World -version demonstrates
- maintaining and accessing instrument state (in this example count
  number of greets made)
- help to list commands 
- more detailed help on menu commands
- menu structuring using menu separator
- hiding menu command from menu command list
- default value for menu command parameter
- proviso to integrate ~hello2~ to menu system ~ebMenu~ (ref
  [[file:EBMENU.org]])

~hello2~ example continues in [[file:GENTLE_SLOPE.org]] with a
demonstration of a "gentle slope" to use an ~ebench~ -application 1)
interactively, 2) from command line, 3) integrated with ~ebMenu~ with
access to API interfaces configured in YAML, and, finally, 4) how to
use recordings from interactive session to create copy-paste API calls
for Python scripts.

** Elements in ~hello2~ application

This chapter defines template place holders = names inside double
angle brackets: ~<<>>~

*** Import services from ~ebench~: ~<<t_imports_ebench>>~

Import services provided by ~ebench~: 
- ~Instrument~: abstract class for a generic instrument in ~ebench~
  -toolset. 
- ~MenuCtrl~: ~ebench~ menu implementation
- ~ebench~ infrastrcture service functions:
  - ~usage~: helper output listing menu commands and presenting
    appliaction overview
  - ~usageCommand~: help on menu command in application
  - ~menuStartRecording~: start recording of interactive use menu commands
  - ~menuStopRecording~: save recording of interactive menu commands
  - ~menuScreenShot~: take a screenshot from the instrument
  - ~version~: output ~ebench~ toolset version number

#+name: t_imports_ebench
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*

from ebench import Instrument
from ebench import MenuCtrl

from ebench import usage, usageCommand, menuStartRecording, menuStopRecording, menuScreenShot, version
#+END_SRC


*** Define usage and help texts: ~<<t_USAGE>>~

Define name, short description and a description of application
services.

#+name: t_USAGE
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
  CMD="hello2"

  SYNOPSIS="Hello -command just demonstrates simple menu action"

  USAGE_TEXT = """

  This demo presents:

   - maintaining instrument state: counting number of greetings made

   - command 'hello' accepting two parameters, one of the parameters
     (whom) is prompted for every command call, the other paremeter (who)
     defaults to to login-name, and its value is rememebered from
     previous call

   - menu separator

   - help to list command (and to show this text)

   - more detailed help on menu commands

   - hidden command: _version

   - proviso for integrating ~hello2~ with ebMenu

  """
#+END_SRC


*** Implement Instrument controller classes: ~<<t_InstrumentApi>>~ and ~<<t_InstrumentFacade>>~


 Define ~HelloApi~, which keeps tract of ~greetCount~. method
 ~HelloApi.greetCount~ provides interface to access instrument
 state. Parameter ~fake~ will be later used to demontrate, how YAML
 configuration may pass literal constants to API call.

*<<t_InstrumentApi>>*

#+name: t_InstrumentApi
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
  class HelloApi(Instrument):
  
    def __init__(self, greetCount=0):
        self._greetCount = greetCount

    def greetCount(self, fake=0 ):
        """Access object state variable with API twist

        :fake: parameter used to demonstrate passing literal parameter
        value in API call

        :return: current 'greetCount' + 'fake'

        """

        return self._greetCount + int(fake)

    def hello( self, whom:str, who:str ) -> str:
      """:return: JSON -document"""
      return  { 'HELLO' : whom, 'FROM': who }


    def greetDone(self):
        self._greetCount = self._greetCount + 1
          

#+END_SRC

Use use ~HelloApi~ to derive ~HelloInstrument~ providing facade to
user. ~sayHello~ method calls ~greetDone()~ to count up greeting made
in ~HelloApi~ class.

*<<t_InstrumentFacade>>* 
#+name: t_InstrumentFacade
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
  class HelloInstrument(HelloApi):

    def __init__(self, greetCount=0):
        super().__init__(greetCount)

    def sayHello( self, whom:str, who:str ):
        """Hello -command just demonstrates simple menu action.

        It receives to parameters 'whom' and 'who' and prints greeting
        and increments 'greetCount' (just to demonstrate that Intrument
        MAY maintain internal state).

        :who: default value is of 'who' parameter is logged in user, its
        value is remembered between greetings

        :whom: object to be greeted

        sayHello just creates a facadea uses uses API provided by
        HelloApi to contruct the greeting

        """
        self.greetDone()
        hello = self.hello( whom=whom, who =who )
        print( "Hello #{} to {} from {}".format( 
            self._greetCount, hello["HELLO"], hello["FROM"]))
#+END_SRC


*** Define menu commands and parameters: ~<<t_MenuElements>>~ and ~<<t_MenuRows>>~

Menu commands and parameters are configed ~<<t_MenuElements>>~ element.

Dictionary ~greetPar~ names the the paramerters ~sayHello~ method
accepts, and maps these variable names from prompt string presented to
user.

Dictionary ~defaults~ is used to provide default values to menu
parameters. In this example, hello menu selection parameter ~who~ gets
default value from environment variable ~$USER~.

*<<t_MenuElements>>*

#+name: t_MenuElements
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*

  # Menu commands 
  CMD_GREET = "sayHello"


  # Parameters to menu command CMD_GREET
  greetPar = {
      "whom": "Whom to greet?",
      "who":  "Who is the greeter? Ret accepts default value: ",
  }

  # Initial values for menu command parameters
  defaults = {
      CMD_GREET : {
          "who": os.environ['USER']
      }
  }
#+END_SRC

*<<t_MenuRows>>*

~<<t_MenuRows>>~ is a list key-values pairs added into a dictionary
defining application menu.

#+name: t_MenuRows
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
          CMD_GREET                : ( "Say hello", greetPar, instrument.sayHello ),
#+END_SRC


*** Construct instrument controller:  ~<<t_constructorParam>>~ and ~<<t_constructorCall>>~

Contructing instrument uses two template elements:
<<t_constructorParam>> defines parameters configuring instrument
controller, and <<t_constructorCall>> instantiates instrument
controller object using configuration parameters.


*<<t_constructorParam>>*

<<t_constructorParam>> parameters added are included in ~run~
-function parameter list. 

#+name: t_constructorParam
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
greetCount=0
#+END_SRC


*<<t_constructorCall>>*

Instrument controller construction passes parameters defined in
<<t_constructorParam>> to class implementing facade providing services
to user to operate instrument.

#+name: t_constructorCall
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
instrument = HelloInstrument(greetCount=greetCount)
#+END_SRC


*** Define runtime configuration and ~main~ -function: ~<<t_confDef>>~ and ~<<t_confParam>>~

Instrument runtime configuration and ~main~ -function are implemented
in a serate class to avoid conflicts in runtime configuration
parameter names, when different instrument controllers are merged
together within one program.

Runtime configuration and ~main~ -function uses three template elements:
- ~<<t_import_app>>~: import ~run~ function from instrument controller
  implementation module
- ~<<t_confDef>>~: define command line configuration parameters for instrument controller
- ~<<t_confParam>>~: add command line configuration arguments to ~run~
  -function argument list. This template elements reflect the caller
  side of template element ~<<t_constructorParam>>~ presented above

*<<t_import_app>>*
#+name: t_import_app
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
from hello2 import run
#+END_SRC

*<<t_confDef>>*
#+name: t_confDef
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
flags.DEFINE_integer('greetCount', 0, "Initial number of greets already made")
#+END_SRC

*<<t_confParam>>*
#+name: t_confParam
#+BEGIN_SRC python :eval no :results output :noweb no :session *Python*
greetCount=FLAGS.greetCount
#+END_SRC


** Templates to produce instrument controller application

Application elements presentes in previous chapter are used in two
templates producing Python code:

1) module for instrument controller implementation and ~run~ function:
   ~app.py~

2) instrument controller run time configuration and standalone ~main~:
   ~app-main.py~

*** Instrument controller implementation: ~app.py~ 

This template creates Python module implemeting instrument controller
classes and ~run~ function.

~run~ -function instantiates ~intrument~ -variable, constructs
~menuController~, sets up application ~mainMenu~. Parameter ~runMenu~
guards call to ~menuController.mainMenu()~, which starts application
[[https://codewith.mu/en/tutorials/1.1/repl][REPL]] (red-eval-print) -loop. Parameter ~runMenu~ is set ~True~ for
interactive use, for command line use and for API use it is ~False~.


#+BEGIN_SRC python :eval no :results output :noweb no :session *Python* :noweb yes :tangle examples/hello2/hello2.py :noweb yes :exports code
  # Tangled from TEMPLATE.org - changes will be overridden

  <<t_imports_ebench>>

  import os
  from time import sleep
  from absl import logging

  <<t_imports_os>>
  # ------------------------------------------------------------------
  # Usage 
  <<t_USAGE>>

  # ------------------------------------------------------------------
  # Acces instrument API
  <<t_InstrumentApi>>

  # ------------------------------------------------------------------
  # Facade presented to user
  <<t_InstrumentFacade>>


  # ------------------------------------------------------------------
  # Menu
  <<t_MenuElements>>

  # ------------------------------------------------------------------
  # Bind instrument controller classes to ebench toolset
  def run( _argv, <<t_constructorParam>>
       , runMenu:bool = True
       , outputTemplate=None, captureDir=None, recordingDir=None ):
      """Examaple template 

      :runMenu: default True, standalone application call REPL-loop
      'menuController.mainMenu()', subMenu constructs 'menuController'
      without executing the loop

      :outputTemplate: if None(default): execute cmds/args, else (not
      None): map menu actions to strings using 'outputTemplate'

      :recordingDir: directory where interactive session recordings are
      saved to (defaults to 'FLAGS.recordingDir')

      :captureDir: directory where screenshots are made, defaults to
      'FLAGS.captureDir'

      :return: MenuCtrl (wrapping instrument)

      """

      # 'instrument' controlled by application 
      <<t_constructorCall>> 

      # Wrap instrument with 'MenuCtrl'
      menuController = MenuCtrl( args=_argv,instrument=instrument
                               , prompt="[q=quit,?=commands,??=help on command]"
                               , outputTemplate=outputTemplate )

      mainMenu = {
          CMD                      : MenuCtrl.MENU_SEPATOR_TUPLE,
          # Application menu 
          <<t_MenuRows>>

          "Util"                   : MenuCtrl.MENU_SEPATOR_TUPLE,
          MenuCtrl.MENU_REC_START  : ( "Start recording", None, menuStartRecording(menuController) ),
          MenuCtrl.MENU_REC_SAVE   : ( "Stop recording", MenuCtrl.MENU_REC_SAVE_PARAM, menuStopRecording(menuController, recordingDir=recordingDir) ),
          MenuCtrl.MENU_SCREEN     : ( "Take screenshot", MenuCtrl.MENU_SCREENSHOT_PARAM,
                                       menuScreenShot(instrument=instrument,captureDir=captureDir,prefix="Capture-" )),
          MenuCtrl.MENU_HELP       : ( "List commands", None,
                                      lambda **argV: usage(cmd=CMD, mainMenu=mainMenu, synopsis=SYNOPSIS, usageText=USAGE_TEXT)),
          MenuCtrl.MENU_HELP_CMD   : ( "List command parameters", MenuCtrl.MENU_HELP_CMD_PARAM,
                                   lambda **argV: usageCommand(mainMenu=mainMenu, **argV )),

          "Quit"                   : MenuCtrl.MENU_SEPATOR_TUPLE,
          MenuCtrl.MENU_QUIT       : MenuCtrl.MENU_QUIT_TUPLE,

          # Hidden commands
          MenuCtrl.MENU_VERSION    : ( "Output version number", None, version ),
      }

      menuController.setMenu( menu = mainMenu, defaults = defaults)

      # Interactive use starts REPL-loop
      if runMenu: menuController.mainMenu()

      # menuController.close() call after returning from run()
      return menuController
#+END_SRC


*** Instrument controller run time configuration and standalone ~main~: ~app-main.py~

#+BEGIN_SRC python :eval no :results output :noweb no :session *Python* :noweb yes :tangle examples/hello2/hello2_main.py :noweb yes :exports code :noweb yes :shebang "#!/usr/bin/env python3"
# Tangled from TEMPLATE.org - changes will be overridden

# main for instrument controller define in module
<<t_import_app>>

from absl import app, flags, logging
from absl.flags import FLAGS

# Run time configurations of instrument controller
<<t_confDef>>

def _main( _argv ):
    logging.set_verbosity(FLAGS.debug)
    menuController = run(
           _argv
          , <<t_confParam>>   # pass run time configuration parameters to controller
          , captureDir=FLAGS.captureDir
          , recordingDir=FLAGS.recordingDir
          , outputTemplate=FLAGS.outputTemplate 
          )
    menuController.close()


def main():
    try:
        app.run(_main)
    except SystemExit:
        pass
    
    
if __name__ == '__main__':
    main()

#+END_SRC




** hello2 application 

The complete ~hello2~ implementation is presented in the following
sections:

*** ~hello2.py~
 #+BEGIN_SRC bash :eval no-export :results output :exports results
 cat examples/hello2/hello2.py
 #+END_SRC

 #+RESULTS:
 #+begin_example
 # Tangled from TEMPLATE.org - changes will be overridden


 from ebench import Instrument
 from ebench import MenuCtrl

 from ebench import usage, usageCommand, menuStartRecording, menuStopRecording, menuScreenShot, version

 import os
 from time import sleep
 from absl import logging


 # ------------------------------------------------------------------
 # Usage 
 CMD="hello2"

 SYNOPSIS="Hello -command just demonstrates simple menu action"

 USAGE_TEXT = """

 This demo presents:

  - maintaining instrument state: counting number of greetings made

  - command 'hello' accepting two parameters, one of the parameters
    (whom) is prompted for every command call, the other paremeter (who)
    defaults to to login-name, and its value is rememebered from
    previous call

  - menu separator

  - help to list command (and to show this text)

  - more detailed help on menu commands

  - hidden command: _version

  - proviso for integrating ~hello2~ with ebMenu

 """

 # ------------------------------------------------------------------
 # Acces instrument API
 class HelloApi(Instrument):

   def __init__(self, greetCount=0):
       self._greetCount = greetCount

   def greetCount(self, fake=0 ):
       """Access object state variable with API twist

       :fake: parameter used to demonstrate passing literal parameter
       value in API call

       :return: current 'greetCount' + 'fake'

       """

       return self._greetCount + int(fake)

   def hello( self, whom:str, who:str ) -> str:
     """:return: JSON -document"""
     return  { 'HELLO' : whom, 'FROM': who }


   def greetDone(self):
       self._greetCount = self._greetCount + 1



 # ------------------------------------------------------------------
 # Facade presented to user
 class HelloInstrument(HelloApi):

   def __init__(self, greetCount=0):
       super().__init__(greetCount)

   def sayHello( self, whom:str, who:str ):
       """Hello -command just demonstrates simple menu action.

       It receives to parameters 'whom' and 'who' and prints greeting
       and increments 'greetCount' (just to demonstrate that Intrument
       MAY maintain internal state).

       :who: default value is of 'who' parameter is logged in user, its
       value is remembered between greetings

       :whom: object to be greeted

       sayHello just creates a facadea uses uses API provided by
       HelloApi to contruct the greeting

       """
       self.greetDone()
       hello = self.hello( whom=whom, who =who )
       print( "Hello #{} to {} from {}".format( 
           self._greetCount, hello["HELLO"], hello["FROM"]))


 # ------------------------------------------------------------------
 # Menu

 # Menu commands 
 CMD_GREET = "sayHello"


 # Parameters to menu command CMD_GREET
 greetPar = {
     "whom": "Whom to greet?",
     "who":  "Who is the greeter? Ret accepts default value: ",
 }

 # Initial values for menu command parameters
 defaults = {
     CMD_GREET : {
         "who": os.environ['USER']
     }
 }

 # ------------------------------------------------------------------
 # Bind instrument controller classes to ebench toolset
 def run( _argv, greetCount=0
      , runMenu:bool = True
      , outputTemplate=None, captureDir=None, recordingDir=None ):
     """Examaple template 

     :runMenu: default True, standalone application call REPL-loop
     'menuController.mainMenu()', subMenu constructs 'menuController'
     without executing the loop

     :outputTemplate: if None(default): execute cmds/args, else (not
     None): map menu actions to strings using 'outputTemplate'

     :recordingDir: directory where interactive session recordings are
     saved to (defaults to 'FLAGS.recordingDir')

     :captureDir: directory where screenshots are made, defaults to
     'FLAGS.captureDir'

     :return: MenuCtrl (wrapping instrument)

     """

     # 'instrument' controlled by application 
     instrument = HelloInstrument(greetCount=greetCount) 

     # Wrap instrument with 'MenuCtrl'
     menuController = MenuCtrl( args=_argv,instrument=instrument
                              , prompt="[q=quit,?=commands,??=help on command]"
                              , outputTemplate=outputTemplate )

     mainMenu = {
         CMD                      : MenuCtrl.MENU_SEPATOR_TUPLE,
         # Application menu 
         CMD_GREET                : ( "Say hello", greetPar, instrument.sayHello ),

         "Util"                   : MenuCtrl.MENU_SEPATOR_TUPLE,
         MenuCtrl.MENU_REC_START  : ( "Start recording", None, menuStartRecording(menuController) ),
         MenuCtrl.MENU_REC_SAVE   : ( "Stop recording", MenuCtrl.MENU_REC_SAVE_PARAM, menuStopRecording(menuController, recordingDir=recordingDir) ),
         MenuCtrl.MENU_SCREEN     : ( "Take screenshot", MenuCtrl.MENU_SCREENSHOT_PARAM,
                                      menuScreenShot(instrument=instrument,captureDir=captureDir,prefix="Capture-" )),
         MenuCtrl.MENU_HELP       : ( "List commands", None,
                                     lambda **argV: usage(cmd=CMD, mainMenu=mainMenu, synopsis=SYNOPSIS, usageText=USAGE_TEXT)),
         MenuCtrl.MENU_HELP_CMD   : ( "List command parameters", MenuCtrl.MENU_HELP_CMD_PARAM,
                                  lambda **argV: usageCommand(mainMenu=mainMenu, **argV )),

         "Quit"                   : MenuCtrl.MENU_SEPATOR_TUPLE,
         MenuCtrl.MENU_QUIT       : MenuCtrl.MENU_QUIT_TUPLE,

         # Hidden commands
         MenuCtrl.MENU_VERSION    : ( "Output version number", None, version ),
     }

     menuController.setMenu( menu = mainMenu, defaults = defaults)

     # Interactive use starts REPL-loop
     if runMenu: menuController.mainMenu()

     # menuController.close() call after returning from run()
     return menuController
 #+end_example


*** ~hello2_main.py~

 Application main is saved into a separate file, ~hello2_main.py~, to
 avoid conflicts in ~absl~ flags in other applications.

 #+BEGIN_SRC bash :eval no-export :results output :exports results
 cat examples/hello2/hello2_main.py
 #+END_SRC

 #+RESULTS:
 #+begin_example
 #!/usr/bin/env python3
 # Tangled from TEMPLATE.org - changes will be overridden

 # main for instrument controller define in module
 from hello2 import run

 from absl import app, flags, logging
 from absl.flags import FLAGS

 # Run time configurations of instrument controller
 flags.DEFINE_integer('greetCount', 0, "Initial number of greets already made")

 def _main( _argv ):
     logging.set_verbosity(FLAGS.debug)
     menuController = run(
            _argv
           , greetCount=FLAGS.greetCount   # pass run time configuration parameters to controller
           , captureDir=FLAGS.captureDir
           , recordingDir=FLAGS.recordingDir
           , outputTemplate=FLAGS.outputTemplate 
           )
     menuController.close()


 def main():
     try:
         app.run(_main)
     except SystemExit:
         pass


 if __name__ == '__main__':
     main()
 #+end_example


*** ~__init__.py~ and directory list

 Python requires an ~__init__.py~ -file to be saved along with
 ~hello2.py~ and ~hello2_main.py~

 #+BEGIN_SRC bash :eval no-export :results output :exports results
 cd examples/hello2
 ls -ltr | grep -v  __pycache__ | grep -v 'hello.yaml'
 #+END_SRC

 #+RESULTS:
 : total 24
 : -rw-rw-r-- 1 jj jj 4335 huhti 27 12:22 hello2.py
 : -rwxr-xr-x 1 jj jj  705 huhti 27 12:22 hello2_main.py
 : -rw-rw-r-- 1 jj jj    1 huhti 27 12:22 __init__.py


** Running ~hello2~

In the examples below, ~<<hello2Cmd>>~ refers to following command:

#+name: hello2Cmd
#+BEGIN_SRC cpp :exports code
examples/hello2/hello2_main.py
#+END_SRC


*** Configuration parameters with ~--help~

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<hello2Cmd>> --help
#+END_SRC

#+RESULTS:
#+begin_example

       USAGE: examples/hello2/hello2_main.py [flags]
flags:

examples/hello2/hello2_main.py:
  --greetCount: Initial number of greets already made
    (default: '0')
    (an integer)

Try --helpfull to get a list of all flags.
#+end_example




*** Usage help and listing commands with =?=
#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<hello2Cmd>> ?
#+END_SRC

#+RESULTS:
#+begin_example
hello2: Hello -command just demonstrates simple menu action

Usage: hello2 [options] [commands and parameters] 

Commands:

----------   hello2   ----------
       sayHello  : Say hello
----------    Util    ----------
              !  : Start recording
              .  : Stop recording
         screen  : Take screenshot
              ?  : List commands
             ??  : List command parameters
----------    Quit    ----------
              q  : Exit


This demo presents:

 - maintaining instrument state: counting number of greetings made

 - command 'hello' accepting two parameters, one of the parameters
   (whom) is prompted for every command call, the other paremeter (who)
   defaults to to login-name, and its value is rememebered from
   previous call

 - menu separator

 - help to list command (and to show this text)

 - more detailed help on menu commands

 - hidden command: _version

 - proviso for integrating ~hello2~ with ebMenu


#+end_example


*** Hidden commands

Notice command ~_version~ is not show in commands list presented in
previous chapter. However, running

#+name: hello2-version
#+BEGIN_SRC bash :eval no-export :results output :exports both :noweb yes
<<hello2Cmd>> _version
#+END_SRC

outputs version number of ebench -application

#+RESULTS: hello2-version
: 0.0.10-pre7


*** Help on a specific command: =??=

#+BEGIN_SRC bash :eval no-eval :results output :exports both :noweb yes
<<hello2Cmd>> ?? command=sayHello
#+END_SRC

#+RESULTS:
#+begin_example
sayHello - Say hello

Hello -command just demonstrates simple menu action.

It receives to parameters 'whom' and 'who' and prints greeting
and increments 'greetCount' (just to demonstrate that Intrument
MAY maintain internal state).

:who: default value is of 'who' parameter is logged in user, its
value is remembered between greetings

:whom: object to be greeted

sayHello just creates a facadea uses uses API provided by
HelloApi to contruct the greeting

      whom  : Whom to greet?
       who  : Who is the greeter? Ret accepts default value: 

Notice:
- parameters MUST be given in the order listed above
- parameters are optional and they MAY be left out
#+end_example



*** Default value of a parameter

Expect to see 'Hello world from $USER', where user gets default value
from environment variable.

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
echo USER=$USER
<<hello2Cmd>> greet whom="world" 
#+END_SRC

#+RESULTS:
: USER=jj
: Hello #1 to world from jj


Expect to see 'Hello earth from moon', where default value
~os.environ['USER']~ is overridden with the value received from
command line ~who="moon~:

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<hello2Cmd>> greet whom="earth" who="moon"
#+END_SRC

#+RESULTS:
: Hello #1 to earth from moon


*** Object state is managed and parameter values are remembered

Making two CLI -greetings line demonstrates how object state is
maintained (=variable ~greetCount~ incremented for each greeting).

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
<<hello2Cmd>> sayHello whom="moon" who="earth" sayHello whom="sun"
#+END_SRC

#+RESULTS:
: Hello #1 to moon from earth
: Hello #2 to sun from earth


*** Use command line configuration for intialization

Use command CLI switch ~--greetCount=61~ to initialize application,
and expect to see greetings counted starting from 62:

#+BEGIN_SRC bash :eval no-export :results output :noweb yes :exports both
echo USER=$USER
<<hello2Cmd>> --greetCount=61 sayHello whom="the world"  sayHello whom="the sun"   sayHello whom="the moon"  
#+END_SRC

#+RESULTS:
: USER=jj
: Hello #62 to the world from jj
: Hello #63 to the sun from jj
: Hello #64 to the moon from jj

 
* Fin                                                              :noexport:

Example continues in [[file:GENTLE_SLOPE.org]] with a demonstration, how
intrument API may be accessed using YAML configuration and how Python
scripting may be supported using intercative use session recording to
craete API -call snippets.

   # Local Variables:
   # org-confirm-babel-evaluate: nil
   # End:
   #


