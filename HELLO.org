
* First version

** IMports
   :PROPERTIES:
   :header-args:bash: :dir  examples/hello
   :END:


 #+name: import
 #+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python*
 import ebench
 from ebench import MenuCtrl


 #+END_SRC

 #+name: import-env
 #+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python*
 import os
 from absl import app, flags, logging
 from absl.flags import FLAGS
 #+END_SRC


** Define hello

 #+name: hello
 #+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python*
 def hello( whom:str ):
     print( "Hello {}".format(whom))
 #+END_SRC


 #+name: helloPar
 #+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python*
 helloPar = {
    "whom": "Whom to greet?"
 }
 #+END_SRC


** Define menu

 #+name: menu
 #+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python*

     mainMenu = {
         "hello"             : ( "Say hello", helloPar, hello),
         MenuCtrl.MENU_QUIT       : ( "Exit", None, None),
     }


 #+END_SRC


** define =_main=

 #+name: _main
 #+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python* :noweb yes
 def _main( _argv ):
     # global gSkooppi
     logging.set_verbosity(FLAGS.debug)

     cmdController = MenuCtrl()

     cmdController.mainMenu( _argv, mainMenu=mainMenu, mainPrompt="[hello, q=quit]")

    

 #+END_SRC

 #+RESULTS: _main


** define script ~main~

 #+name: main
 #+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python*


 def main():
     try:
         app.run(_main)
     except SystemExit:
         pass
    
    
 if __name__ == '__main__':
     main()

 #+END_SRC


** Hello.py


 #+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python* :tangle examples/hello/hello.py :noweb yes :shebang "#!/usr/bin/env python3"
 <<import>>

 <<import-env>>

 <<hello>>

 <<helloPar>>

 <<menu>>

 <<_main>>

 <<main>>

 #+END_SRC





* Second version

** Hello2


 #+name: hello2
 #+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python*
   def hello( whom:str, who:str ):
       """Hello -command just demonstrates simple menu action.

       It receives to parameters 'whom' and 'who' and prints
       greeting. Defaulta value of 'who' parameter is logged user,
       and its value is remembered between hello commands

       Returns greeted 'whom' if greeter/who is not the same as
       greeted/whom.

       Notice, how

       """
       print( "Hello {} from {}".format(whom, who))
       return whom if who != whom else None
 #+END_SRC


** hellopar2

 #+name: helloPar2
 #+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python*
 helloPar = {
    "whom": "Whom to greet?",
    "who":  "Who is the greeter? Ret accepts default value: ",
 }
 #+END_SRC


** defaults

#+name: defaults
#+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python*

defaults = {
"hello" : {
             "who": os.getlogin()
          }
}

#+END_SRC


** Import usage

 #+name: import2
 #+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python*
 from ebench import usage, usageCommand
 #+END_SRC

** Define command parameters for help command

#+name:helpers
#+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python*

  helpPar = {
        "command": "Command to give help on (None: help on main menu)"
  }

#+END_SRC


** Usage documentation

#+name:usageText
#+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python*

usageText = """

This demo presents:

- command 'hello'  acceting two parameters, one of the parameters (whom) is
  prompted for every command call, the other paremeter (who) defaults to 
  to login-name, and its value is rememebered from previous call

- menu separator

- help to list command

- help on command parameters

- hidden command: _version


"""


#+END_SRC


** Define menun2

 #+name: menu
 #+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python*

     mainMenu = {
         "Commands:"              : ( None, None, None),
         "hello"                  : ( "Say hello", helloPar, hello),
         "Help:"                  : ( None, None, None),
         MenuCtrl.MENU_HELP       : ( "List commands", None,
                                    lambda **argV: usage(cmd=os.path.basename(__file__), mainMenu=mainMenu, synopsis="Demo hello v2", usageText=usageText )),
         MenuCtrl.MENU_CMD_PARAM  : ( "List command parameters", helpPar,
                                    lambda **argV: usageCommand(mainMenu=mainMenu, **argV)),
         "_version"               : ("Version number", None, lambda **argv: print( ebench.version())),
         "Exit:"                  : ( None, None, None),
         MenuCtrl.MENU_QUIT       : ("Exit", None, None),

     }


 #+END_SRC


** define =_main2=

 #+name: _main2
 #+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python* :noweb yes
 def _main( _argv ):
     # global gSkooppi
     logging.set_verbosity(FLAGS.debug)

     cmdController = MenuCtrl()

     cmdController.mainMenu( _argv, mainMenu=mainMenu, mainPrompt="[hello, q=quit]", defaults=defaults)
    

 #+END_SRC

 #+RESULTS: _main




** Hello modified

 #+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python* :tangle examples/hello/hello2.py :noweb yes :shebang "#!/usr/bin/env python3"
 <<import>>

 <<import2>>

 <<import-env>>

 <<hello2>>

 <<helloPar2>>

 <<defaults>>

 <<helpers>>

 <<usageText>>

 <<menu>>

 <<_main2>>

 <<main>>

 #+END_SRC



* Fin                                                              :noexport:

** Emacs variables

   #+RESULTS:

   # Local Variables:
   # org-confirm-babel-evaluate: nil
   # End:
   #
   # Muuta 
   # eval: (cdlatex-mode)
   #
   # Local ebib:
   # org-ref-default-bibliography: "./HELLO.bib"
   # org-ref-bibliography-notes: "./HELLO-notes.org"
   # org-ref-pdf-directory: "./pdf/"
   # org-ref-notes-directory: "."
   # bibtex-completion-notes-path: "./HELLO-notes.org"
   # ebib-preload-bib-files: ("./HELLO.bib")
   # ebib-notes-file: ("./HELLO-notes.org")
   # reftex-default-bibliography: ("./HELLO.bib")



